<?php

namespace App\Modules\Api\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use App\Modules\Api\Http\Requests\{CreateRequest, EditRequest};
use App\Modules\Api\Models\{Texonomy, ListMedia, ListArea, ListCategory, ListIssue, ListProvince, ListSetting, ListTarget, ListMediaIssues, ListMediaKeywords, ListMediaTargets, ListTemplate, Department, ApiLogs, ViewMediaAmount, ListArticle, IcbDolLog};
use App\Modules\Article\Models\{Article};
use App\Modules\Setting\Models\Setting;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Carbon\Carbon;
use Junity\Hashids\Facades\Hashids;
use Hash;
use Crypt;
use Illuminate\Support\Facades\Log;
use DB;
use Illuminate\Support\Facades\Auth;
use Excel;

class IndexController extends Controller
{
    public function taxonomyAdd(Request $request)
    {

        $chk = Texonomy::where('user_id', $request->user_id)->first();
        $taxonomy_arr = json_decode($request->id_all);
        $taxonomy_id = implode(",", $taxonomy_arr);
        if (is_null($chk)) {
            $taxonomy = new Texonomy;
            $taxonomy->user_id = $request->user_id;
            $taxonomy->taxonomy_id = $taxonomy_id;
            $taxonomy->save();
        } else {
            $chk->update(['taxonomy_id' => $taxonomy_id]);
        }

        return response()->json(['status' => true]);
    }
    public function logtest()
    {
        //dd(Auth::check());
        Auth::logout();
    }

    public function getphpinfo()
    {
        phpinfo();
    }

    public function GET_ENV()
    {

        ini_set('memory_limit', -1);
        ini_set('max_execution_time', 0);
        set_time_limit(0);
        // $input = $request->all();
        $date_now = date('Y-m-d-H-i-s');
        $file_name = 'listmedia-api&webview' . "-" . $date_now;
        $type = 'xlsx';
        $data = DB::table('list_media')
            ->select(
                'list_media.id',
                'list_media.title',
                'list_media.template',
                'list_media.status',
                'list_media.api',
                'list_media.web_view',
                'list_media.sex',
                'list_media.age',
                'department.name',
                DB::raw("JSON_UNQUOTE(JSON_EXTRACT(list_media.json_data, '$.Keywords')) AS Keyword"),
                DB::raw("JSON_UNQUOTE(JSON_EXTRACT(list_media.json_data, '$.Issues')) AS Issues"),
                DB::raw("JSON_UNQUOTE(JSON_EXTRACT(list_media.json_data, '$.Targets')) AS Targets"),
                DB::raw("JSON_UNQUOTE(JSON_EXTRACT(list_media.json_data, '$.Settings')) AS Settings")
            )
            ->leftjoin('department','department.id','list_media.department_id')
            // ->whereIn("list_media.id", [197, 243, 256, 265, 312, 333, 385, 433, 435, 436, 438, 440, 581, 584, 611, 612, 655, 781, 786, 788, 795, 796, 797, 825, 833, 836, 893, 898, 916, 920, 922, 930, 931, 934, 977, 979, 981, 982, 983, 984, 986, 987, 988, 991, 993, 995, 996, 1011, 1017, 1020, 1044, 1118, 1119, 1158, 1159, 1165, 1168, 1172, 1190, 1191, 1200, 1204, 1206, 1212, 1222, 1224, 1280, 1311, 1317, 1363, 1378, 1379, 1405, 1447, 1449, 1459, 1460, 1461, 1462, 1463, 1464, 1482, 1484, 1485, 1510, 1522, 1534, 1539, 1541, 1549, 1592, 1593, 1596, 1600, 1603, 1606, 1608, 1611, 1613, 1614, 1619, 1656, 1663, 1664, 1667, 1672, 1676, 1677, 1702, 1706, 1733, 1740, 1741, 1744, 1774, 1783, 1796, 1802, 1804, 1845, 1857, 1878, 1881, 1882, 1919, 1938, 1988, 2000, 2007, 2052, 2069, 2087, 2088, 2093, 2094, 2097, 2143, 2147, 2148, 2150, 2153, 2154, 2157, 2161, 2163, 2165, 2166, 2167, 2180, 2183, 2229, 2271, 2277, 2282, 2289, 2320, 2323, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2342, 2347, 2348, 2351, 2355, 2356, 2357, 2358, 2359, 2360, 2407, 2413, 2426, 2428, 2450, 2470, 2471, 2472, 2500, 2501, 2502, 2503, 2504, 2519, 2522, 2523, 2525, 2526, 2527, 2529, 2532, 2534, 2537, 2545, 2549, 2551, 2552, 2555, 2556, 2558, 2569, 2570, 2571, 2617, 2619, 2621, 2622, 2623, 2624, 2625, 2626, 2680, 2695, 2709, 2710, 2713, 2738, 2743, 2746, 2754, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2788, 2789, 2798, 2799, 2800, 2802, 2814, 2818, 2834, 2835, 2836, 2840, 2845, 2848, 2874, 2875, 2899, 2901, 2904, 2905, 2907, 2910, 2911, 2912, 2914, 2922, 2931, 2932, 2939, 2940, 2947, 2954, 2959, 2962, 2964, 2965, 2969, 2972, 2974, 2975, 2977, 2978, 2987, 2988, 2990, 2996, 2998, 3003, 3015, 3018, 3020, 3022, 3023, 3026, 3027, 3028, 3029, 3032, 3035, 3036, 3039, 3042, 3043, 3044, 3045, 3047, 3051, 3052, 3053, 3097, 3113, 3115, 3116, 3131, 3138, 3273, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3293, 3300, 3322, 3327, 3347, 3348, 3349, 3475, 3489, 3502, 3505, 3506, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3524, 3525, 3533, 3534, 3535, 3537, 3538, 3565, 3568, 3585, 3586, 3588, 3628, 3630, 3634, 3636, 3640, 3641, 3643, 3697, 3700, 3701, 3702, 3703, 3704, 3706, 3711, 3714, 3721, 3736, 3763, 3769, 3776, 3781, 3784, 3785, 3788, 3796, 3807, 3878, 3883, 3925, 3975, 4017, 4069, 4099, 4117, 4130, 4164, 4176, 4177, 4179, 4194, 4210, 4294, 4295, 4301, 4302, 4303, 4304, 4310, 4331, 4375, 4381, 4422, 4440, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4456, 4457, 4458, 4459, 4499, 4500, 4501, 4502, 4521, 4540, 4547, 4548, 4549, 4550, 4551, 4553, 4554, 4555, 4556, 4557, 4568, 4569, 4570, 4576, 4592, 4614, 4655, 4661, 4677, 4691, 4692, 4707, 4731, 4745, 4755, 4757, 4758, 4776, 4777, 4788, 4795, 4806, 4808, 4829, 4832, 4834, 4836, 4838, 4916, 4919, 4920, 4924, 4927, 4936, 4937, 4939, 4940, 4941, 4997, 5038, 5165, 5173, 5345, 5363, 5389, 5396, 5421, 5454, 5688, 5751, 5758, 5824, 5904, 5915, 5951, 5987, 5988, 5989, 5994, 6023, 6031, 6034, 6046, 6063, 6065, 6070, 6102, 6122, 6130, 6134, 6135, 6136, 6137, 6141, 6145, 6146, 6150, 6152, 6155, 6183, 6186, 6188, 6192, 6193, 6194, 6196, 6201, 6203, 6218, 6228, 6229, 6232, 6233, 6234, 6235, 6239, 6240, 6241, 6243, 6244, 6246, 6248, 6250, 6252, 6325, 6388, 6390, 6416, 6428, 6440, 6443, 6449, 6457, 6460, 6472, 6474, 6476, 6508, 6559, 6626, 6627, 6632, 6640, 6667, 6672, 6676, 6687, 6705, 6706, 6708, 6709, 6715, 6716, 6723, 6725, 6737, 6739, 6740, 6745, 6746, 6756, 6762, 6767, 6768, 6777, 6787, 6790, 6792, 6798, 6799, 6934, 6936, 6937, 6944, 6945, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6956, 6960, 6961, 6966, 6969, 6971, 6978, 6983, 7003, 7004, 7005, 7007, 7024, 7026, 7042, 7051, 7064, 7066, 7076, 7081, 7091, 7094, 7096, 7100, 7107, 7118, 7126, 7131, 7133, 7142, 7145, 7157, 7193, 7203, 7205, 7209, 7215, 7220, 7222, 7224, 7225, 7233, 7237, 7244, 7245, 7247, 7248, 7249, 7251, 7262, 7366, 7369, 7373, 7377, 7378, 7379, 7408, 7415, 7418, 7467, 7474, 7479, 7480, 7487, 7489, 7491, 7508, 7517, 7522, 7531, 7553, 7581, 7595, 7629, 7630, 7632, 7633, 7634, 7635, 7644, 7645, 7646, 7647, 7649, 7652, 7653, 7654, 7657, 7658, 7661, 7663, 7666, 7667, 7669, 7674, 7675, 7677, 7680, 7688, 7692, 7694, 7696, 8156, 8175, 8181, 8185, 8197, 8202, 8203, 8206, 8210, 8214, 8228, 8232, 8233, 8234, 8237, 8239, 8240, 8242, 8248, 8250, 8252, 8263, 8266, 8270, 8272, 8279, 8282, 8283, 8284, 8286, 8289, 8293, 8322, 8330, 8339, 8346, 8348, 8349, 8351, 8352, 8678, 8679, 8682, 8683, 8809, 8852, 8881, 8882, 8889, 8890, 8895, 9008, 9013, 9014, 9023, 9025, 9030, 9032, 9037, 9040, 9044, 9052, 9056, 9060, 9062, 9068, 9071, 9077, 9080, 9082, 9099, 9101, 9104, 9105, 9110, 9113, 9117, 9128, 9133, 9137, 9141, 9153, 9166, 9196, 9197, 9200, 9202, 9203, 9206, 9210, 9212, 9219, 9231, 9242, 9248, 9493, 9494, 9497, 9503, 9505, 9518, 10254, 11642, 12339, 12340, 12344, 12345, 12346, 12347, 12348, 12364, 12370, 12377, 12381, 12388, 12389, 12391, 12403, 12412, 12413, 12414, 12415, 12416, 12594, 12595, 12596, 12765, 12766, 12767, 12768, 12769, 12770, 12771, 12772, 12773, 12774, 12775, 12776, 12777, 12973, 13001, 13006, 13022, 13055, 13058, 13077, 13292, 30688, 30689, 30690, 30691, 30692, 30693, 30694, 30695, 30696, 30698, 30699, 30700, 39181, 39199, 39214, 39235, 39237, 39250, 39282, 39285, 39286, 39287, 39292, 39321, 39323, 39330, 39332, 39333, 39338, 39353, 39355, 39359, 39391, 39407, 39441, 39442, 39554, 39584, 39585, 39589, 39601, 39619, 39629, 40045, 40049, 40052, 40059, 40061, 40070, 40077, 40084, 40095, 40097, 40103, 40113, 40121, 40128, 40130, 40131, 40148, 40151, 40154, 40156, 40157, 40174, 40175, 40176, 40178, 40182, 40184, 40186, 40189, 40193, 40196, 40203, 40204, 40205, 40214, 40215, 40216, 40217, 40218, 40224, 40225, 40228, 40229, 40235, 40236, 40245, 40246, 40247, 40249, 40252, 40253, 40256, 40266, 40270, 40271, 40272, 40273, 40274, 40275, 40276, 40277, 40278, 40279, 40282, 40283, 40284, 40285, 40286, 40293, 40303, 40305, 40333, 40344, 40348, 40349, 40352, 40356, 40369, 40381, 40391, 40393, 40396, 40400, 40401, 40415, 40420, 40438, 40443, 40446, 40456, 40457, 40467, 40469, 40476, 40478, 40491, 40501, 40502, 40510, 40514, 40515, 40528, 40532, 40538, 40541, 40547, 40550, 40555, 40563, 40571, 40588, 40596, 40622, 40650, 40654, 40655, 40662, 40663, 40677, 40680, 40683, 40684, 40688, 40691, 40695, 40699, 40709, 40714, 40718, 40730, 40734, 40749, 40763, 40765, 40767, 40772, 40786, 40791, 40807, 40808, 40811, 40822, 40827, 40830, 40835, 40837, 40842, 40844, 40853, 40890, 40899, 40910, 40916, 40925, 40934, 40937, 40941, 40946, 40947, 40950, 40954, 40961, 40966, 40969, 40971, 40979, 40981, 41012, 41075, 41077, 41085, 41101, 41110, 41116, 41117, 41123, 41124, 41141, 41143, 41152, 41155, 41160, 41164, 41182, 41183, 41184, 41190, 41191, 41204, 41221, 41242, 41255, 41275, 41276, 41294, 41306, 41307, 41320, 41324, 41325, 41333, 41365, 41371, 41401, 41408, 41412, 41414, 41415, 41438, 41443, 41444, 41445, 41453, 41455, 41457, 41458, 41465, 41471, 41497, 41498, 41502, 41504, 41505, 41506, 41511, 41512, 41528, 41529, 41530, 41534, 41539, 41541, 41542, 41544, 41545, 41548, 41550, 41556, 41565, 41566, 41567, 41569, 41573, 41576, 41579, 41583, 41584, 41585, 41586, 41589, 41591, 41607, 41622, 41625, 41636, 41637, 41658, 41659, 41678, 41698, 41699, 41726, 41729, 41730, 41839, 41843, 41870, 41917, 41930, 41940, 41961, 41962, 41964, 41980, 42002, 42007, 42008, 42069, 42070, 42075, 42084, 42087, 42105, 42127, 42154, 42156, 42184, 42187, 42191, 42198, 42236, 42265, 42293, 42295, 42296, 42303, 42344, 42345, 42371, 42373, 42446, 42500, 42515, 42677, 42684, 42715, 42716, 42736, 42746, 42777, 42780, 42855, 42856, 42858, 42863, 42895, 42922, 42924, 42928, 43012, 43092, 43258, 43281, 43301, 43306, 43329, 43335, 43336, 43377, 43411, 43480, 43505, 43538, 43581, 43620, 43667, 43719, 43789, 43809, 43853, 43863, 43882, 43939, 43993, 44014, 44016, 44057, 44071, 44083, 44097, 44100, 44105, 44129, 44146, 44216, 44343, 44350, 44362, 44365, 44369, 44378, 44466, 44495, 44523, 44588, 44591, 44603, 44604, 44605, 44608, 44615, 44625, 44629, 44630, 44631, 44678, 44680, 44714, 44740, 44747, 44750, 44769, 44771, 44782, 44790, 44797, 44830, 44831, 44876, 44881, 44883, 44909, 44924, 44926, 44941, 44949, 44951, 44953, 44961, 44994, 45004, 45010, 45030, 45049, 45119, 45124, 45152, 45159, 45162, 45165, 45166, 45178, 45210, 45211, 45228, 45232, 45235, 45238, 45251, 45252, 45267, 45290, 45352, 45430, 45431, 45433, 45442, 45445, 45446, 45477, 45478, 45491, 45520, 45528, 45530, 45531, 45577, 45704, 45738, 45745, 45848, 45911, 45914, 45961, 45966, 46016, 46105, 46525, 46543, 46551, 46631, 46632, 46633, 46634, 46640, 46641, 46642, 46643, 46644, 46645, 46646, 46647, 46648, 46650, 46651, 46653, 46654, 46655, 46656, 46657, 46658, 46659, 46660, 46661, 46662, 46663, 46664, 46666, 46667, 46669, 46670, 46671, 46672, 46686, 46692, 46695, 46708, 46709, 46729, 46730, 46731, 46732, 46734, 46736, 46739, 46740, 46744, 46746, 46789, 46816, 47080, 47081, 47082, 47083, 47084, 47085, 47086, 47087, 47088, 47089, 47232, 47243, 47349, 47518, 47667, 47672, 47735, 47761, 47762, 47763, 47764, 47765, 47766, 47767, 47768, 47769, 47770, 47771, 47772, 47773, 47946, 47951, 47952, 47954, 47971, 47975, 47997, 47998, 48000, 48594, 48595, 48596, 48597, 48598, 49089, 49187, 49305, 49624, 49629, 49642, 49643, 49647, 49649, 49650, 49660, 49670, 49677, 49682, 49683, 49688, 49693, 49702, 49720, 49722, 49724, 49725, 49726, 49727, 49773, 49809, 49811, 49822, 49852, 49853, 49854, 49855, 49856, 49858, 49859, 49864, 49865, 49866, 49867, 49868, 49869, 49874, 49875, 49880, 49905, 49976, 49985, 50008, 50015, 50019, 50021, 50024, 50028, 50031, 50036, 50038, 50039, 50040, 50050, 50055, 50057, 50059, 50063, 50072, 50073, 50108, 50125, 50139, 50141, 50147, 50149, 50164, 50166, 50173, 50176, 50460, 50464, 50556, 50793, 50889, 51018, 51034, 51096, 51097, 51202, 51203, 51205, 51344, 51345, 51349, 51352, 51365, 51366, 51367, 51369, 51371, 51480, 51536, 51537, 51538, 51543, 51574, 51666, 51667, 51669, 51706, 51743, 51744, 51745, 51757, 51761, 51764, 51805, 51816, 51854, 51892, 51893, 51894, 51895, 51899, 51974, 51995, 51998, 51999, 52000, 52138, 52191, 52193, 52259, 52273, 52277, 52280, 52281, 52282, 52283, 52284, 52295, 52311, 52314, 52321, 52322, 52353, 52376, 52392, 52393, 52394, 52395, 52407, 52542, 52550, 52770, 52811, 52812, 52813, 52818, 52851, 52918, 52919, 52936, 52943, 52945, 53033, 53092, 53093, 53094, 53095, 53101, 53102, 53103, 53104, 53105, 53106, 53249, 53255, 53256, 53262, 53281, 53286, 53295, 53504, 53505, 53506, 53508, 53509, 53511, 53512, 53516, 53629, 53665, 53674, 53893, 53895, 53896, 53930, 53932, 53939, 53941, 53946, 53947, 53949, 53952, 53957, 54023, 54028, 54030, 54032, 54043, 54044, 54046, 54051, 54063, 54064, 54082, 54107, 54108, 54109, 54110, 54111, 54193, 54204, 54214, 54215, 54216, 54217, 54218, 54219, 54221, 54222, 54223, 54226, 54232, 54233, 54235, 54236, 54354, 54407, 54426, 54427, 54431, 54502, 54505, 54516, 54544, 54545, 54549, 54556, 54558, 54560, 54561, 54562, 54563, 54566, 54567, 54569, 54572, 54574, 54578, 54579, 54582, 54586, 54587, 54588, 54590, 54591, 54592, 54596, 54597, 54598, 54599, 54600, 54673, 54675, 54676, 54695, 54755, 54757, 54760, 54762, 54767, 54821, 54822, 54823, 54827, 54828, 54854, 54859, 54860, 54861, 54883, 54886, 54888, 54906, 54930, 54931, 54935, 54981, 54987, 55028, 55056, 55107, 55123, 55126, 55160, 55332, 55333, 55334, 55337, 55338, 55365, 55689, 55717, 55719, 56065, 56072, 56109, 56276, 56372, 56448, 56449, 56450, 56518, 56519, 56523, 56551, 56553, 56570, 56587, 56593, 56677, 56851, 56863, 56875, 56883, 56938, 56939, 56977, 56978, 56980, 57008, 57010, 57043, 57093, 57094, 57126, 57138, 57140, 57160, 57172, 57177, 57178, 57179, 57182, 57185, 57188, 57193, 57194, 57195, 57197, 57198, 57201, 57202, 57206, 57209, 57210, 57211, 57221, 57222, 57223, 57224, 57226, 57252, 57253, 57264, 57293, 57295, 57334, 57348, 57413, 57426, 57428, 57431, 57436, 57477, 57560, 57588, 57592, 57593, 57594, 57595, 57596, 57597, 57628, 57629, 57713, 57715, 57776, 57778, 57929, 57979, 58144, 58145, 58152, 58153, 58158, 58166, 58167, 58168, 58170, 58171, 58173, 58174, 58175, 58176, 58177, 58178, 58179, 58180, 58181, 58182, 58183, 58184, 58185, 58186, 58187, 58188, 58189, 58190, 58196, 58197, 58199, 58201, 58203, 58204, 58205, 58207, 58208, 58212, 58213, 58214, 58215, 58216, 58217, 58219, 58220, 58221, 58266, 58278, 58293, 58294, 58295, 58362, 58363, 58364, 58365, 58572, 58585, 58623, 58644, 58645, 58646, 58647, 58648, 58649, 58650, 58651, 58652, 58654, 58655, 58656, 58657, 58658, 58659, 58660, 58661, 58662, 58663, 58664, 58665, 58666, 58668, 58669, 58670, 58671, 58672, 58673, 58674, 58675, 58676, 58677, 58678, 58679, 58680, 58681, 58682, 58683, 58684, 58685, 58686, 58687, 58688, 58689, 58690, 58691, 58692, 58693, 58694, 58695, 58696, 58697, 58698, 58699, 58700, 58701, 58702, 58703, 58704, 58705, 58706, 58707, 58708, 58736, 58759, 58791, 58794, 58795, 58797, 58808, 58821, 58848, 58890, 58891, 58892, 58893, 58894, 58895, 58896, 58897, 58898, 58899, 58935, 58936, 58937, 58938, 58939, 58940, 58941, 58947, 58948, 58949, 58950, 58951, 58952, 58953, 58954, 58955, 58956, 58957, 58958, 58959, 58960, 58961, 58962, 59000, 59118, 59119, 59121, 59146, 59201, 59202, 59203, 59207, 59250, 59251, 59253, 59254, 59255, 59256, 59257, 59258, 59259, 59260, 59263, 59264, 59265, 59268, 59269, 59278, 59280, 59281, 59282, 59283, 59284, 59285, 59286, 59287, 59288, 59289, 59290, 59291, 59292, 59305, 59338, 59339, 59340, 59341, 59342, 59343, 59344, 59345, 59346, 59347, 59350, 59353, 59356, 59368, 59387, 59391, 59392, 59393, 59394, 59397, 59399, 59401, 59581, 59583, 59614, 59627, 59652, 59710, 59764, 59775, 59799, 59804, 59868, 59869, 59919, 59921, 59922, 59923, 59924, 59945, 59982, 60009, 60013, 60068, 60070, 60071, 60072, 60074, 60076, 60077, 60078, 60079, 60081, 60094, 60095, 60096, 60097, 60136, 60137, 60139, 60140, 60141, 60204, 60213, 60216, 60243, 60247, 60248, 60249, 60250, 60333, 60334, 60337, 60397, 60442, 60527, 60528, 60532, 60534, 60569, 60581, 60592, 60594, 60595, 60598, 60629, 60761, 60762, 60763, 60764, 60765, 60766, 60767, 60768, 60769, 60770, 60771, 60805, 60809, 60846, 60847, 60848, 60870, 60883, 60902, 60904, 60943, 60944, 60961, 60962, 60965, 60977, 60979, 60980, 60983, 60984, 60989, 61003, 61005, 61007, 61010, 61011, 61013, 61014, 61015, 61019, 61020, 61021, 61022, 61023, 61024, 61025, 61026, 61027, 61028, 61029, 61031, 61050, 61061, 61070, 61082, 61105, 61135, 61147, 61148, 61149, 61150, 61152, 61163, 61164, 61165, 61166, 61168, 61213, 61234, 61255, 61256, 61267, 61268, 61270, 61271, 61272, 61356, 61376, 61377, 61447, 61528, 61533, 61541, 61544, 61545, 61547, 61564, 61576, 61586, 61609, 61611, 61614, 61615, 61616, 61711, 61712, 61742, 61743, 61747, 61774, 61813, 61847, 61853, 61856, 61876, 61877, 61880, 61889, 61891, 61893, 61906, 62014, 62035, 62037, 62069, 62075, 62078, 62079, 62082, 62084, 62086, 62094, 62105, 62107, 62108, 62109, 62110, 62111, 62159, 62161, 62162, 62164, 62167, 62186, 62201, 62215, 62217, 62218, 62240, 62241, 62273, 62274, 62285, 62306, 62329, 62341, 62344, 62345, 62349, 62352, 62355, 62357, 62358, 62389, 62407, 62409, 62410, 62411, 62412, 62413, 62415, 62416, 62417, 62423, 62424, 62426, 62428, 62429, 62430, 62434, 62449, 62450, 62464, 62466, 62467, 62468, 62470, 62471, 62473, 62474, 62475, 62503, 62504, 62507, 62508, 62536, 62537, 62538, 62539, 62540, 62541, 62542, 62543, 62544, 62615, 62658, 62659, 62660, 62661, 62662, 62666, 62667, 62668, 62669, 62670, 62671, 62672, 62674, 62691, 62692, 62698, 62716, 62796, 62797, 62829, 62833, 62838, 62839, 62840, 62841, 62842, 62843, 62844, 62845, 62846, 62847, 62874, 62875, 62876, 62877, 62878, 62902, 62905, 62906, 62907, 62924, 63022, 63023, 63052, 63084, 63092, 63124, 63130, 63131, 63132, 63133, 63134, 63148, 63149, 63150, 63151, 63152, 63153, 63155, 63158, 63159, 63160, 63166, 63171, 63172, 63173, 63174, 63176, 63177, 63183, 63184, 63185, 63186, 63187, 63188, 63194, 63197, 63216, 63243, 63272, 63273, 63274, 63286, 63288, 63293, 63294, 63295, 63296, 63297, 63298, 63299, 63303, 63304, 63315, 63326, 63327, 63328, 63329, 63340, 63341, 63373, 63390, 63463, 63464, 63465, 63466, 63467, 63468, 63471, 63472, 63476, 63480, 63504, 63507, 63510, 63511, 63515, 63517, 63518, 63519, 63536, 63537, 63538, 63539, 63540, 63567, 63568, 63569, 63587, 63599, 63601, 63695, 63696, 63735, 63784, 63785, 63811, 63813, 63828, 63829, 63849, 63851, 63933, 63934, 63935, 63936, 63937, 63941, 63943, 63957, 63971, 63972, 63973, 63975, 63976, 63977, 63978, 63980, 63999, 64004, 64008, 64011, 64017, 64018, 64020, 64021, 64022, 64023, 64024, 64036, 64037, 64038, 64039, 64040, 64041, 64042, 64043, 64044, 66205, 66706, 66839, 66966, 66970, 66971, 67030, 67031, 67032, 67061, 67071, 67151, 67152, 67153, 67176, 67177, 67189, 67203, 67205, 67206, 67217, 67218, 67219, 67220, 67221, 67222, 67233, 67234, 67237, 67238, 67239, 67271, 67272, 67273, 67274, 67275, 67517, 67526, 67533, 67534, 67537, 67539, 67540, 67541, 67542, 67545, 67549, 67551, 67552, 67579, 67581, 67584, 67585, 67586, 67587, 67588, 67589, 67590, 67591, 67592, 67593, 67594, 67595, 67596, 67597, 67598, 67599, 67600, 67621, 67623, 67639, 67640, 67651, 67653, 67655, 67656, 67657, 67658, 67659, 67660, 67661, 67662, 67663, 67664, 67665, 67666, 67667, 67668, 67679, 67680, 67681, 67682, 67693, 67694, 67695, 67696, 67708, 67756, 67759, 67773, 67774, 67780, 67782, 67784, 67785, 67796, 67797, 67798, 67799, 67821, 67822, 67823, 67824, 67847, 67849, 67850, 67865, 67867, 67878, 67882, 67920, 68000, 68040, 68044, 68047, 68050, 68053, 68054, 68055, 68056, 68060, 68061, 68066, 68092, 68130, 68151, 68177, 68178, 68179, 68180, 68192, 68219, 68236, 68264, 68381])
            ->where('show_dol',2)
            ->where('list_media.created_at',">=",'2023-01-01')
            ->get();
        
            if(!empty($data)){
                foreach($data as $key => $value){
                    $data[$key]->Keyword  = (!empty($value->Keyword))? implode(',',json_decode($value->Keyword)) : null;
                    $data[$key]->Issues  = (!empty($value->Issues))? implode(',',collect(json_decode($value->Issues))->pluck('Name')->toArray()) : null;
                    $data[$key]->Targets  = (!empty($value->Targets))? implode(',',collect(json_decode($value->Targets))->pluck('Name')->toArray()) : null;
                    $data[$key]->Settings  = (!empty($value->Settings))? implode(',',collect(json_decode($value->Settings))->pluck('Name')->toArray()) : null;
                    $data[$key]->sex = $this->MappingSex($value->sex);
                    $data[$key]->age = $this->MappingAge($value->age);
                }
            }
            

          return   Excel::create($file_name, function ($excel) use ($data) {
                $excel->sheet('mySheet', function ($sheet) use ($data) {
                    //$sheet->fromArray($items,null, 'A1', true);
                    $sheet->row(1, array(
                        'id',
                        'title',
                        'template',
                        'status',
                        'api',
                        'web_view',
                        'sex',
                        'age',
                        'name',
                        'keyword',
                        'issues',
                        'targets',
                        'settings'
                    ));
    
    
                    $index = 2;
                    foreach ($data as $key => $value) {
                        $sheet->row($index++, array(
                            $value->id,
                            $value->title,
                            $value->template,
                            $value->status,
                            $value->api,
                            $value->web_view,
                            $value->sex,
                            $value->age,
                            $value->name,
                            $value->Keyword,
                            $value->Issues,
                            $value->Targets,
                            $value->Settings
                        ));
                    }
                });
            })->download($type);




// 
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "https://api.connect-x.tech/connectx/api/auth/login");
        curl_setopt($ch, CURLOPT_POST, 1);

        curl_setopt(
            $ch,
            CURLOPT_POSTFIELDS,
            http_build_query(array('email' => 'thaihealth-api@connect-x.tech', 'password' => 'ab2cebadecfd0bb638288a88e60bba27d66199b9'))
        );
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        // Receive server response ...
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        //$server_output = curl_exec($ch);
        $result = curl_exec($ch);
        if ($result === FALSE) {
            printf(
                "cUrl error (#%d): %s<br>\n",
                curl_errno($ch),
                htmlspecialchars(curl_error($ch))
            );
        }
        curl_close($ch);
        print_r($result);
        exit();
    }

    public function SendMediaTermCommentMapping($Comment){
        $Comment = preg_replace('/\s+/', '', $Comment);
        $Reason = null;
        switch ($Comment) {
            case 'กรณีที่1':
                $Reason = "รายงานโครงการ/ รายงานงวด/ ภาพกิจกรรมในโครงการฯ/ ภาพข่าวในโครงการฯ";
                break;
                case 'กรณีที่2':
                    $Reason = "ข่าวที่ตัดปะ/ โควทคำ/ โควทข่าว/ โควทภาพ หรือข่าวจากแหล่งต่างๆ";
                    break;
                    case 'กรณีที่3':
                        $Reason = "รายงานอื่นๆ ของสำนักหรือของภาคี เช่น รายงานการดำเนินงาน รายงานประจำปี รายงานสรุปผลโครงการ ฯลฯ";
                        break;
                        case 'กรณีที่4':
                            $Reason = "เป็นสื่อที่ใช้ในการขับเคลื่อนงานในเชิงพื้นที่ที่ เหมาะสำหรับผู้นำการเปลี่ยนแปลง";
                            break;
                            case 'กรณีที่5':
                                $Reason = "ตัวอักษรเล็ก ภาพไม่ชัดเจน (ส่วนใหญ่เป็นสื่อ Infographic)";
                                break;
                                case 'กรณีที่6':
                                    $Reason = "การตั้งชื่อไม่สอดคล้องกับตัวสื่อ ขอให้ใส่ชื่อให้สมบูรณ์ (ไม่ควรใช้ชื่อไฟล์สื่อเป็นชื่อสื่อ) ขอให้ปรับชื่อของสื่อใน DOL";
                                    break;
                                    case 'กรณีที่7':
                                        $Reason = "ไฟล์ที่เป็นการออกแบบ หรือโครงสร้าง หรือภาพถ่าย หรือ logo ขอให้ใส่สื่อใหม่เป็น Jpeg หรือ PNG ใน DOL (สำนักต้องทำขั้นตอนใน DOL ใหม่)";
                                        break;
                                        case 'กรณีที่8':
                                            $Reason = "ปลายทาง link URL จำกัดสิทธิ์เข้าถึง หรือมีการโยกย้ายปรับปรุงที่ส่งผลกระทบกับตัวสื่อ ทำให้หาสื่อไม่เจอ";
                                            break;
                                            case 'กรณีที่9':
                                                $Reason = "ข้อมูลไม่สมบูรณ์ขาดหน้าปกสื่อ ขอให้เพิ่มเติมการใส่รูปภาพหน้าปกสื่อที่เป็น Link , คลิป, ไฟล์เสียง, Multimedia ต่างๆ ใน DOL";
                                                break;            
            default:
            $Reason = null;
            break;
        }
        return $Reason;
    }
    public function UpdateMediaTermStatusFromExcel(){
        $data = array(
            array("val0"=>"ข่าวประชาสัมพันธ์งาน","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/0caf51b6-9043-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"รายงานโครงการ","val1"=>"กรณีที่ 3","val2"=>"https://dol.thaihealth.or.th/Media/Index/a6969d72-9743-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/27e6c9ed-e445-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/98d518f7-e445-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/99d518f7-e445-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/abb1a39e-1b4a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/85a91df7-1b4a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/71044980-1d4a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/5329f1a8-1d4a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/0330f700-4d4d-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"วาระกลาง2565","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/d13d79d4-ef4d-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"วาระกลาง2565","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/f30346bd-f04d-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"วาระกลาง2565","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/7ad71e61-f14d-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"วาระกลาง2565","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/38209dd7-f14d-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/3cef9a30-ad4e-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/61c91ceb-2451-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/037ed514-2551-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/1ca027bf-e854-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/6f31df4a-a556-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/62e528e0-aa56-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/021e020f-685a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/7848303c-7d5a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/4c6e60c4-525e-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/fc3d58cd-ab60-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/7e607abc-a963-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link YouTube ใช้ไม่ได้แล้ว","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/8828fe60-c564-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/2060a310-c864-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/bf875055-c864-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/5b592c1b-6f69-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/11bbaa23-6f69-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/1251123c-076a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/c43be9be-466a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/fd4a5090-476a-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/b1672ea1-3871-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/20d30f5f-4871-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/ff0c9927-4971-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/1b6b60dc-5871-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/7e45aa8f-5971-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/cede9ec6-5971-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/b8390167-5a71-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/e7b7b3aa-5a71-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/45ff51a1-6371-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/483ffacc-6371-ed11-80fa-00155db45626?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/6432caef-1c72-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/32045b20-1276-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/7552873b-1d76-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/78caf769-1d76-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/838d6796-1d76-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/f7064363-af76-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/a6c5a37e-ba76-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/71157cf4-d176-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/02cef117-7677-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/fa5aa04d-7c77-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/eac7e1bb-517b-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/b0da9629-527b-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/933fde65-ef7c-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อไม่สมบูรณ์/ปัญหาเรื่องภาพ","val1"=>"กรณีที่ 5","val2"=>"https://dol.thaihealth.or.th/Media/Index/4c466a6c-fd7c-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/e1eb730e-017d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/15e39f99-9785-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/d2c36329-9885-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/b558fd8f-9885-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/61107e1a-9985-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/98beba5c-9985-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/1551ba8c-9985-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/a18712c3-9985-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/5fb3eb23-9a85-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/dc263280-7986-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/29af67e7-208b-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/76c9855b-e98b-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่มี Logo สสส.","val1"=>"กรณีที่ 7 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/d73bb7e3-8a8d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่มี Logo สสส.","val1"=>"กรณีที่ 7 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/e050ec28-8b8d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่มี Logo สสส.","val1"=>"กรณีที่ 7 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/e150ec28-8b8d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/060403a9-ab97-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/e341113f-c397-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/d238859d-7298-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ข่าวประชาสัมพันธ์งาน","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/2eca21d3-de9a-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์/ข้อมูลน้อย","val1"=>"กรณีที่ 5","val2"=>"https://dol.thaihealth.or.th/Media/Index/f0e89588-599c-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/90f0a3b3-599c-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/b595c973-7c9c-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/2a91c3d0-7c9c-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่มี Logo สสส.","val1"=>"กรณีที่ 7 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/ab8f02cd-e99d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่มี Logo สสส.","val1"=>"กรณีที่ 7 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/c2c1e312-ee9d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ข้อมูลซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/905199ba-ee9d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่มี Logo สสส.","val1"=>"กรณีที่ 7 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/5bef8c4a-f29d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/1ed6b287-f99d-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/4c1083a7-109e-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/fe3cace1-149e-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/979b6d78-fd9f-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/7f244397-fe9f-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/0356bace-00a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/96e1ec4f-01a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/fa7257a6-01a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/cc29c5f6-01a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/a2358da9-02a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/b2b74c47-03a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/bad10a3a-04a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/b99da308-05a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/42b36667-4aa0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/4fa420d9-4aa0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/23a34568-4ba0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/a1490f02-4fa0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์","val1"=>"กรณีที่ 2 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/1d43e826-58a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"สื่อประชาสัมพันธ์/ข้อมูลน้อย","val1"=>"กรณีที่ 5","val2"=>"https://dol.thaihealth.or.th/Media/Index/14eea8cb-6ba0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"สื่อไม่สมบูรณ์ /ข้อมูลไม่ครบ","val1"=>"กรณีที่ 5","val2"=>"https://dol.thaihealth.or.th/Media/Index/5b053fc6-72a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/54c7bc42-74a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/1d218f29-75a0-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/2f02bc93-74a3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/d81502d4-74a3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ซ้ำ","val1"=>"อื่นๆ ","val2"=>"https://dol.thaihealth.or.th/Media/Index/752c080c-75a3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"สื่อไม่สมบูรณ์ /คลิปไม่มีเสียง","val1"=>"กรณีที่ 5","val2"=>"https://dol.thaihealth.or.th/Media/Index/202fbb49-75a3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/caf66fe8-82a3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/241e4b6b-83a3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/bc384a70-8aa3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/8c21b8a1-8aa3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/2dd3625d-8ba3-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/7a27edc6-05a6-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/1262ce8d-06a6-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/91b1e0ab-88a7-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/d6aa6358-36a8-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/88d99229-43ac-ed11-80fe-00155db45636?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/11eb1237-58ac-ed11-80fe-00155db45636?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/ca8534cc-abad-ed11-80fd-00155d1aab66?isSuccess=False"),
            array("val0"=>"Link ไม่แสดงภาพ","val1"=>"กรณีที่ 8 ","val2"=>"https://dol.thaihealth.or.th/Media/Index/ec1dccc2-d7ad-ed11-80fd-00155d1aab66?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/e47001fc-538f-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/c1eeaecf-528f-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/b5c25d1b-518f-ed11-80fb-00155d1aab67?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/85b6806a-32a8-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/3c610974-34a8-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/8d279699-35a8-ed11-80fc-00155d1aab68?isSuccess=False"),
            array("val0"=>"ไม่เหมาะกับประชาชน","val1"=>"กรณีที่ 4","val2"=>"https://dol.thaihealth.or.th/Media/Index/c61e7a6c-37a8-ed11-80fc-00155d1aab68?isSuccess=False"),
        );
        foreach ($data as $key => $value) {
            $UploadFileIDData = str_replace('https://dol.thaihealth.or.th/Media/Index/', "", $value['val2']);
            $UploadFileIDData = str_replace('?isSuccess=False', "", $UploadFileIDData);
            $MediaData = DB::table('list_media')->where('UploadFileID',$UploadFileIDData)->get();

            if(!empty($MediaData)){
                $DataUpdate = [
                    'SendMediaTermStatus' => 52,
                    'SendMediaTermComment' => $this->SendMediaTermCommentMapping($value['val1']),
                    'detail_not_term' => $value['val0']
                ];
                DB::table('list_media')->where('UploadFileID',$UploadFileIDData)->update($DataUpdate);
                echo $UploadFileIDData . "\n";
            }
        }
      
    }

    function MappingSex($sex){
        if(!empty($sex)){
            $sex = str_replace('[', "", $sex);
            $sex = str_replace(']', "", $sex);
            $sex = explode(',',$sex);
            if(!empty($sex)){
              $sex_data =  DB::table('sex')->wherein('id',$sex)->where('status','publish')->pluck('name')->toArray();
              if(!empty($sex_data)){
                return implode(',',$sex_data);
              }else{
                return null;
              }
            }else{
                return null;
            }
        }else{
            return null;
        }
    }


    function MappingAge($age){
        if(!empty($age)){
            $age = str_replace('[', "", $age);
            $age = str_replace(']', "", $age);
            $age = explode(',',$age);
            if(!empty($age)){
              $age_data =  DB::table('age')->wherein('id',$age)->where('status','publish')->pluck('name')->toArray();
              if(!empty($age_data)){
                return implode(',',$age_data);
              }else{
                return null;
              }
            }else{
                return null;
            }
        }else{
            return null;
        }
    }

    public function GetFileExtName($FileType)
    {
        $FileTypeArray = [
            'application/pdf' => "pdf"
        ];

        if (array_key_exists($FileType, $FileTypeArray)) {
            return $FileTypeArray[$FileType];
        } else {
            return $FileType;
        }
    }
    public function GetMeidaFileFromDol()
    {
        ini_set('memory_limit', '-1');
        date_default_timezone_set("Asia/Bangkok");
        // $servername = "127.0.0.1";
        // $username = "thrc_db";
        // $password = "nIkV1MljaOiUQ4oc";
        // $db = "thrc_db";
        $file_folder = "C:/nginx/html/thrc/public/mediadol";
        // Create connection
        // $conn = new mysqli($servername, $username, $password, $db);
        // Check connection
        // if ($conn->connect_error) {
        //     die("Connection failed: " . $conn->connect_error);
        // }
        // echo "Connected successfully\n";
        // $sql = "SELECT 
        // 		* 
        // 	FROM list_media 
        // 	WHERE status = 'publish'
        // 	AND show_dol = '2'
        // 	AND UploadFileID NOT IN (SELECT UploadFileID FROM ibc_dol_import_log)
        // 	OR show_rc = '2'
        // 	AND UploadFileID NOT IN (SELECT UploadFileID FROM ibc_dol_import_log)";
        // $rs = $conn->query($sql) or die("SELECT Error: " . $conn->error);
        // $id = "934,1011,1020,1044,1118,1119,1200,1222,1224,1311,1405,1482,1534,1539,1541,1593,1596,1600,1741,1802,1804,2087,2088,2143,2147,2148,2150,2153,2154,2157,2161,2165,2166,2167,2180,2183,2271,2277,2282,2289,2320,2342,2347,2348,2351,2407,2413,2426,2428,2450,2470,2471,2472,2500,2501,2502,2625,2626,2680,2709,2710,2713,2738,2743,2746,2754,2768,2769,2770,2771,2772,2773,2774,2798,2814,2840,2845,2848,2874,2875,2899,2901,2910,2911,2912,2914,2932,2939,2940,3015,3018,3029,3032,3035,3036,3039,3042,3044,3047,3097,3113,3115,3116,3138,3300,3322,3327,3347,3348,3349,3475,3489,3502,3505,3506,3514,3515,3516,3517,3518,3519,3520,3521,3524,3525,3533,3534,3535,3537,3538,3568,3588,3628,3630,3634,3636,3640,3641,3697,3700,3701,3702,3703,3704,3706,3711,3714,3721,3736,3769,3776,3781,3784,3785,3788,3807,3878,3925,3975,4017,4069,4099,4117,4130,4176,4210,4294,4295,4302,4303,4304,4310,4331,4381,4422,4440,4448,4449,4450,4451,4452,4453,4454,4456,4457,4458,4459,4499,4500,4501,4521,4569,4570,4576,4655,4677,4707,4731,4745,4755,4757,4758,4776,4777,4788,4829,4832,4834,4838";
        // $id = explode(',',$id);
        $rs = DB::table('list_media')
            ->select('*')
            ->where('status', "publish")
            ->where('show_dol', "2")
            ->wherenotin('UploadFileID', DB::table('ibc_dol_import_log')->pluck('UploadFileID'))
            ->orwhere('status', "publish")
            ->where('show_rc', "2")
            ->wherenotin('UploadFileID', DB::table('ibc_dol_import_log')->pluck('UploadFileID'))
            ->get();

        // dd($rs);
        // $old_media_fix_file = DB::table('ibc_dol_import_log')
        // ->where('create_at',">=","2023-01-01")
        // ->pluck('UploadFileID');
        // $rs = DB::table('list_media')
        // ->select('*')
        // ->wherein('UploadFileID',$old_media_fix_file)
        // ->get();
        $i = 0;
        $error = 0;
        // cretate log file
        $logfilePath = "C:/bat_files/log_error/prd-" . date('Y-m-d') . ".txt";
        if (!file_exists($logfilePath)) {
            // Open the file for writing, creating it if it does not exist
            $fh = fopen($logfilePath, 'x');
            // Close the file
            fclose($fh);
        }
        foreach ($rs as $key_data => $value_data) {
            //echo strtoupper($data->UploadFileID) . "\n";
            try {

                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'http://dol.thaihealth.or.th/WCF/DOLService.svc/json/GetMediaDol',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS => '{
				"UserName":"thrc-pro",
				"Password":"sHdd-eMW_wa_cZht748K$2^$Y2_Hyk6jc3",
				"UploadFileID":"' . strtoupper($value_data->UploadFileID) . '"
			}',
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/json',
                        'Cookie: lastRequestTime='
                    ),
                ));
                $response = curl_exec($curl);
                curl_close($curl);
                $resArr = json_decode(preg_replace('/[\x00-\x1F\x80-\xFF]/', '',  $response), true);
                // check UploadFileID ว่ามีค่าหรือไม่ ถ้ามีค่า ให้ทำงานโดนการ copy หรือไม่
                if ($resArr['UploadFileID'] != "") {
                    try {
                        echo ++$i . "\n";
                        $patrh = $file_folder . '/' . $resArr['UploadFileID'];
                        $file_ext = $this->GetFileExtName($resArr['UploadFile']['Format']);
                        if (!is_dir($patrh)) {
                            mkdir($file_folder . '/' . $resArr['UploadFileID'], 0777, true);
                        }
                        $tmp = explode('/', $resArr['UploadFile']['FileAddress']);
                        $filename_FileAddress = $tmp[count($tmp) - 1];
                        $fFileAddress = explode('.', $filename_FileAddress);

                        $tmp = explode('/', $resArr['UploadFile']['ThumbnailAddress']);
                        $filename_ThumbnailAddress = $tmp[count($tmp) - 1];
                        $fThumbnailAddress = explode('.', $filename_ThumbnailAddress);

                        $fileFileAddress = (is_array($fFileAddress)) ? md5(time()) . "." . $file_ext  : md5(time());
                        $fThumbnailAddress = (is_array($fThumbnailAddress)) ? "ThumbnailAddress_" . md5(time()) . "." . $fThumbnailAddress[1] : "ThumbnailAddress_" . md5(time());

                        echo $resArr['UploadFileID'] . "\n";
                        echo $fileFileAddress . "\n";
                        echo $fThumbnailAddress . "\n";

                        // ฟังก์ชักชั่นโหลดไฟล์ตัวใหม่
                        $curl = curl_init();

                        curl_setopt_array($curl, array(
                            CURLOPT_URL => 'http://dol.thaihealth.or.th/WCF/DOLOtherService.svc/json/GenTokenDownload',
                            CURLOPT_RETURNTRANSFER => true,
                            CURLOPT_ENCODING => '',
                            CURLOPT_MAXREDIRS => 10,
                            CURLOPT_TIMEOUT => 0,
                            CURLOPT_FOLLOWLOCATION => true,
                            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                            CURLOPT_CUSTOMREQUEST => 'POST',
                            CURLOPT_POSTFIELDS => '{
                        "UserName":"thrc-pro",
                    	"Password":"sHdd-eMW_wa_cZht748K$2^$Y2_Hyk6jc3",
                        "UploadFileID": "' . strtoupper($value_data->UploadFileID) . '",
                        "Email" :"khomsan@thaihealth.or.th",
                        "IsPublic" :true
                    }',
                            CURLOPT_HTTPHEADER => array(
                                'Content-Type: application/json'
                            ),
                        ));
                        $response = curl_exec($curl);
                        $TokenDol = json_decode(preg_replace('/[\x00-\x1F\x80-\xFF]/', '', $response), true);
                        curl_close($curl);
                        try {
                            if (empty($TokenDol)) {
                                $fileFileAddress = null;
                            } else {

                                if (empty($TokenDol['Token'])) {
                                    $fileFileAddress = null;
                                } else {

                                    echo 'https://dol.thaihealth.or.th/DownloadFile/' . $TokenDol['Token'] . "\n";
                                    try {
                                        $file = file_get_contents('https://dol.thaihealth.or.th/DownloadFile/' . $TokenDol['Token']);

                                        if (file_put_contents($patrh . '/' . $fileFileAddress, $file)) {
                                            DB::table('list_media')
                                                ->where('id', $value_data->id)
                                                ->update([
                                                    'local_path' => $fileFileAddress,
                                                ]);
                                        }
                                    } catch (\Throwable $th) {
                                        //throw $th;
                                    }
                                }
                            }
                        } catch (\Throwable $th) {
                            continue;
                        }
                        //ตัวเก่า
                        //if($resArr['UploadFile']['FileAddress'] != "") {
                        //$tmp = explode('/', $resArr['UploadFile']['FileAddress']);
                        //$filename = $tmp[count($tmp) - 1];
                        //$file = file_get_contents($resArr['UploadFile']['FileAddress']);
                        //file_put_contents($patrh . '/' . $fileFileAddress, $file);
                        //}
                        // try {
                        if ($resArr['UploadFile']['CoverPath'] != "") {
                            $tmp = explode('/', $resArr['UploadFile']['CoverPath']);
                            $filename = $tmp[count($tmp) - 1];
                            try {
                                $file = file_get_contents($resArr['UploadFile']['CoverPath']);
                                if (file_put_contents($patrh . '/' . $fThumbnailAddress, $file)) {
                                    DB::table('list_media')
                                        ->where('id', $value_data->id)
                                        ->update([
                                            'thumbnail_address' => $fThumbnailAddress
                                        ]);
                                }
                            } catch (\Throwable $th) {
                                //throw $th;
                            }
                        } else	
                            if ($resArr['UploadFile']['ThumbnailAddress'] != "") {

                            $tmp = explode('/', $resArr['UploadFile']['ThumbnailAddress']);
                            $filename = $tmp[count($tmp) - 1];
                            try {
                                $file = file_get_contents($resArr['UploadFile']['ThumbnailAddress']);
                                if (file_put_contents($patrh . '/' . $fThumbnailAddress, $file)) {
                                    DB::table('list_media')
                                        ->where('id', $value_data->id)
                                        ->update([
                                            'thumbnail_address' => $fThumbnailAddress
                                        ]);
                                }
                            } catch (\Throwable $th) {
                                //throw $th;
                            }
                        }
                        // } catch (\Throwable $th) {
                        //     continue;
                        // }
                        echo "------------------\n";
                        // // update file_path
                        // $sql = "UPDATE list_media SET
                        // 		local_path = '" . $fileFileAddress . "',
                        // 		thumbnail_address = '" . $fThumbnailAddress . "'
                        // 	WHERE id='" . $data->id . "'";
                        // $conn->query($sql) or die("UPDATE Error: " . $conn->error);
                        DB::table('ibc_dol_import_log')->insert([
                            'UploadFileID' => $resArr['UploadFileID'],
                            'create_at' => DB::raw("NOW()")
                        ]);
                        // $sql = "INSERT INTO ibc_dol_import_log VALUES ('" . $resArr['UploadFileID'] . "', NOW())";
                        // $conn->query($sql) or die("INSERT Error: " . $conn->error);
                    } catch (\Throwable $th) {
                        continue;
                    }
                }
            } catch (Throwable  $e) {
                continue;
            }
        }
        echo "total file copy: " . $i . "\n";
        $message = date('Y-m-d H:i:s') . ': copy success ' . $i . ', can not copy ' . $error . PHP_EOL;
        error_log($message, 3, $logfilePath);
    }

    public function postTaskDepartment(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);
          
            $token = explode(" ", $request->header('Authorization'));
            
	    $response = array();
   

            if (Hash::check(env('SECRET'), $token['1'])) {
                
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api Task Department');
                $input = $request->all();
                $department = Department::Data(['status' => ['publish']]);
                $data_api = array();
//dd($department);  
                if ($department->count()) {
                   
                    foreach ($department as $key => $value) {

                         $body = '{"PageNo":1,"PageSize":1,"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '","DepartmentID":"' . $value->id . '"}';

                        $client = new \GuzzleHttp\Client();
                        $request = $client->request('POST', env('URL_LIST_MEDIA'), ['body' => $body]);
                        $response_api = $request->getBody()->getContents();
                        $response_api = str_replace(" ", "", substr($response_api, 3));
                        $data_json = json_decode($response_api, true);
                       
                        $total_rows = $data_json['TotalRows'];
                        Department::where('id', '=', $value->id)->update(['total_items' => $total_rows]);
                        //$total_page = ceil($data_json['TotalRows'] / env('PageSize'));
                        $data_api[$value->id] = $total_rows;
                    }
                   
                    $check_task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'list_media']);
                    if (!isset($check_task->id)) {
                       
                       // $view_media_amount = ViewMediaAmount::Data([])->pluck('total', 'department_id')->toArray();
                       // print_r($view_media_amount);
                       
                        foreach ($department as $key => $value) {
                            //echo $data_api[$value->code]." ".$view_media_amount[$value->code];
                            //echo "<br>";
                            if ($data_api[$value->id] != 0) {

                                // if(isset($view_media_amount[$value->code])){
                                //     if($view_media_amount[$value->code] < $data_api[$value->code]){
                                //         //echo "True-->".$view_media_amount[$value->code];
                                //         //echo "<br>";
                                //         $data = array();
                                //         $data['api_name'] = 'ListMedia '.$value->name;
                                //         $data['status'] = 'processes';
                                //         $data['total'] = $data_api[$value->code];
                                //         $data['page_size'] = env('PageSize');
                                //         $data['page_no'] = 1;
                                //         $data['page_all'] = ceil($data_api[$value->code] / env('PageSize'));
                                //         $data['params'] = $value->code;
                                //         $data['api_type'] = 'list_media';
                                //         ApiLogs::create($data);
                                //     }
                                // }else{
                                //     $data = array();
                                //     $data['api_name'] = 'ListMedia '.$value->name;
                                //     $data['status'] = 'processes';
                                //     $data['total'] = $data_api[$value->code];
                                //     $data['page_size'] = env('PageSize');
                                //     $data['page_no'] = 1;
                                //     $data['page_all'] = ceil($data_api[$value->code] / env('PageSize'));
                                //     $data['params'] = $value->code;
                                //     $data['api_type'] = 'list_media';
                                //     ApiLogs::create($data);
                                // }

                                $data = array();
                                $data['api_name'] = 'ListMedia ' . $value->name;
                                $data['status'] = 'processes';
                                $data['total'] = $data_api[$value->id];
                                $data['page_size'] = env('PageSize', '1000');
                                $data['page_no'] = 1;
                                $data['page_all'] = 1;
                                $data['params'] = $value->id;
                                $data['api_type'] = 'list_media';
                               
                                ApiLogs::create($data);
                                
                            }
                        }
                    }
                }

                Log::info('End Api Task Department');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                //$response['data_api'] =$data_api;
                //$response['view_media_amount'] =$view_media_amount;
                //$response['data'] =$department;
                //$response['total_rows'] =$total_rows;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api Department ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            //$response['header'] =$request->header();
            return  Response::json($response, 500);
        }
    }

    public function getJsonData(Request $request)
    {

        try {

            if ($request->media_id) {

                $item = ListMedia::find($request->media_id);

                $response['msg'] = "success";
                $response['data'] = $item->json_data;
            } else {
                $response['msg'] = "not information";
            }


            $response['status'] = true;
            //$response['header'] =$request->header();
            return  Response::json($response, 200);
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api Department ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            //$response['header'] =$request->header();
            return  Response::json($response, 500);
        }
    }



    public function getMediaDownload(Request $request)
    {
        $item = ListMedia::find(base64_decode($request->base64id));
        $filePath = 'mediadol/' . $item->UploadFileID . '/' . $item->local_path;

        $tmp = explode(".", $item->local_path);

        $file = public_path($filePath);
        $headers = array('Content-type:' . mime_content_type($filePath));

        return Response::download($file, 'filename.' . $tmp[1], $headers);
    }

    public function postListMediatest(Request $request)
    {



        $task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'list_media']);

        $loop_api = 1;
        while ($loop_api <= 2000) {
            if (isset($task->id)) {
                $i = 1;

                $task->update(['note' => 'Page ' . $task->page_no . ' Start']);
                $body = '{"PageNo":"' . $task->page_no . '","PageSize":"' . $task->page_size . '","UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '","DepartmentID":"' . $task->params . '"}';
                $client = new \GuzzleHttp\Client();
                $request = $client->request('POST', 'http://dol-uat.thaihealth.or.th/WCF/DOLService.svc/json/ListMedia', ['body' => $body]);
                $response_api = $request->getBody()->getContents();
                $response_api = str_replace(" ", "", substr($response_api, 3));
                $data_json = json_decode($response_api, true);
                dd($data_json);
            }
        }
    }
    public function postListMedia(Request $request)
    {
        
        try {
            
            ini_set('max_execution_time', 0);
            ini_set('request_terminate_timeout', 0);
            set_time_limit(0);

            $token = explode(" ", $request->header('Authorization'));
            $response = array();



            if (Hash::check(env('SECRET'), $token['1'])) {

                $input = $request->all();
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api List Media');


                $loop_api = 1;
                while ($loop_api <= 2000) {

                    $task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'list_media']);

                    if (isset($task->id)) {
                        $i = 1;
                        $task->update(['note' => 'Page ' . $task->page_no . ' Start']);
                        $body = '{"PageNo":"' . $task->page_no . '","PageSize":"' . $task->page_size . '","UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '","DepartmentID":"' . $task->params . '"}';
                        $client = new \GuzzleHttp\Client();
                        $request = $client->request('POST', env('URL_LIST_MEDIA'), ['body' => $body]);
                        $response_api = $request->getBody()->getContents();
                        $response_api = str_replace(" ", "", substr($response_api, 3));
                        $data_json = json_decode($response_api, true);
                        
                        if ($data_json['TotalRows'] > 0) {
                            foreach ($data_json['Files'] as $key => $value) {
                                
                                $rules = ['UploadFileID' => 'required|unique:list_media,UploadFileID'];/* Dont Forget */
                                $data = ['UploadFileID' => $value['UploadFileID']];
                                $validator = Validator::make($data, $rules);
                                if ($validator->passes()) {
                                   
                                    $array = array();
                                    $array['UploadFileID'] = $value['UploadFileID'];
                                    $array['department_id'] = $task->params;
                                    //$array['json_data'] = json_encode($value);
                                    $array['status'] = 'draft';
                                    ListMedia::create($array);
                                }   
                                /*else{
                                    ### check update date  [UpdatedDate] > today-1
                                    ### call api get media 
                                    ### fileaddress old compare fileaddress new
                                    ### if not equa --> update media_list to unpublish  and update fileaddress to new
                                }*/
                                
                                ##### aey ### Please create new function en else


                                $check_data = 0;
                                $data_array_check = array("healthliteracy");

                                foreach ($value['Keywords'] as $value_keywords) {
                                    //echo $value;
                                    //echo "<br>";
                                    //exit();
                                    //$value_keywords='healthliteracy';
                                    if (array_keys($data_array_check, strtolower($value_keywords))) {
                                        $check_data = 1;
                                        //print_r($value);
                                        //echo "<br>";
                                        //exit();
                                        //dd("True")
                                    }
                                }


                                if ($check_data == 1) {

                                    $check_article = Article::select('id')
                                        ->where('dol_UploadFileID', '=', $value['UploadFileID'])
                                        ->where('page_layout', '=', 'health-literacy')
                                        ->first();

                                    if (!isset($check_article->id)) {

                                        $data_article['page_layout'] = 'health-literacy';
                                        $data_article['title'] = $value['Title'];
                                        $data_article['description'] = $value['Description'];
                                        $data_article['short_description'] = strip_tags($value['Description']);
                                        $data_article['dol_cover_image'] = $value['ThumbnailAddress'];
                                        $data_article['dol_UploadFileID'] = $value['UploadFileID'];
                                        $data_article['dol_url'] = $value['FileAddress'];
                                        $data_article['dol_template'] = $value['Template'];
                                        $data_article['dol_json_data'] = json_encode($value);
                                        $data_article['category_id'] = 0;
                                        foreach ($value['Issues'] as $value_issues) {
                                            if ($value_issues['ID'] == 5) {
                                                #แอลกอฮอล์
                                                $data_article['category_id'] = 5;
                                            }

                                            if ($value_issues['ID'] == 28) {
                                                #บุหรี่
                                                $data_article['category_id'] = 6;
                                            }

                                            if ($value_issues['ID'] == 39) {
                                                #อาหาร
                                                $data_article['c ategory_id'] = 7;
                                            }

                                            if ($value_issues['ID'] == 18) {
                                                #กิจกรรมทางกาย
                                                $data_article['category_id'] = 8;
                                            }

                                            if ($value_issues['ID'] == 41) {
                                                #อุบัติเหตุ
                                                $data_article['category_id'] = 9;
                                            }

                                            if ($value_issues['ID'] == 37) {
                                                #เพศ เช่น ท้องไม่พร้อม
                                                $data_article['category_id'] = 10;
                                            }

                                            if ($value_issues['ID'] == 34) {
                                                #สุขภาพจิต
                                                $data_article['category_id'] = 11;
                                            }
                                            if ($value_issues['ID'] == 35) {
                                                #ความสัมพันธ์ (ครอบครัว ชุมชน ปัจจัยแวดล้อม)
                                                $data_article['category_id'] = 12;
                                            }

                                            if ($value_issues['ID'] == 36) {
                                                #ความสัมพันธ์ (ครอบครัว ชุมชน ปัจจัยแวดล้อม)
                                                $data_article['category_id'] = 12;
                                            }

                                            if ($value_issues['ID'] == 27) {
                                                #สิ่งแวดล้อม
                                                $data_article['category_id'] = 13;
                                            }

                                            if ($value_issues['ID'] == 33) {
                                                #สิ่งแวดล้อม
                                                $data_article['category_id'] = 13;
                                            }

                                            if ($value_issues['ID'] == 49) {
                                                #สิ่งแวดล้อม
                                                $data_article['category_id'] = 13;
                                            }

                                            if ($value_issues['ID'] == 16) {
                                                #อื่นๆ
                                                $data_article['category_id'] = 14;
                                            }

                                            if ($value_issues['ID'] == 21) {
                                                #อื่นๆ
                                                $data_article['category_id'] = 14;
                                            }

                                            if ($value_issues['ID'] == 32) {
                                                #อื่นๆ
                                                $data_article['category_id'] = 14;
                                            }

                                            if ($value_issues['ID'] == 42) {
                                                #อื่นๆ
                                                $data_article['category_id'] = 14;
                                            }
                                        }

                                        //print_r($value['Issues']);
                                        //print_r(gettype($value_issues['ID']));
                                        //echo "<br>";
                                        //print_r($data_article['category_id']);
                                        //exit();

                                        $date_year = date('Y-m-d');
                                        $date_year = strtotime($date_year);
                                        $date_year = strtotime("+10 year", $date_year);
                                        $data_article['start_date'] = date("Y-m-d H:i:s");
                                        $data_article['end_date'] = date('Y-m-d H:i:s', $date_year);
                                        //dd($data_article);
                                        // echo "<pre>";
                                        //         print_r($data_article);
                                        // echo "</pre>";
                                        // exit();
                                        Article::create($data_article);
                                    }
                                }

                                $i++;
                            }
                            $next_page = $task->page_no + 1;
                            $task->update(['page_no' => $next_page, 'note' => 'Page ' . $task->page_no . ' End']);
                            if ($next_page > $task->page_all) {
                                $task->update(['status' => 'end_processes']);
                            }
                        } else {
                            $task->update(['status' => 'end_processes', 'note' => 'Page ' . $task->page_no . ' End']);
                        }
                        //$task->update(['page_no'=>'']);
                        $loop_api = $loop_api + $i;
                    } else {
                        $loop_api = 3000;
                    }
                }

                Log::info('End Api List Media');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                $response['task'] = $task;
                $response['loop_api'] = $loop_api;
                // $response['total']= $data_json['TotalRows'];
                // $response['body']= $body;
                // $response['data_json']= $data_json;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api List Media ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }


    // public function postListMedia(Request $request){

    //     try {

    //         ini_set('max_execution_time', 0);
    //         ini_set('request_terminate_timeout', 0);
    //         set_time_limit(0);

    //         $token = explode(" ",$request->header('Authorization'));
    //         $response = array();

    //         if (Hash::check(env('SECRET'),$token['1']))
    //         { 

    //             $input = $request->all();
    //             if(isset($input['DepartmentID'])){

    //                 Log::useDailyFiles(storage_path().'/logs/api.log');
    //                 Log::info('Start Api List Media DepartmentID =>'.$input['DepartmentID']);

    //                 $body = '{"PageNo":1,"PageSize":1,"UserName":"'.env('API_USER').'","Password":"'.env('API_PASSWORD').'","DepartmentID":"'.$input['DepartmentID'].'"}';
    //                 $client = new \GuzzleHttp\Client();
    //                 $request = $client->request('POST', env('URL_LIST_MEDIA'), ['body' => $body]);    
    //                 $response_api = $request->getBody()->getContents();
    //                 $response_api = str_replace(" ","",substr($response_api,3));
    //                 $data_json = json_decode($response_api, true);
    //                 $total_page = ceil($data_json['TotalRows'] / env('PageSize'));
    //                 //dd($data_json,$total_page);

    //                 if(gettype($data_json) =='array'){

    //                     for ($i=1; $i <= $total_page; $i++) { 

    //                         $body = '{"PageNo":"'.$i.'","PageSize":"'.env('PageSize').'","UserName":"'.env('API_USER').'","Password":"'.env('API_PASSWORD').'","DepartmentID":"'.$input['DepartmentID'].'"}';
    //                         $request = $client->request('POST', env('URL_LIST_MEDIA'), ['body' => $body]);    
    //                         $response_api_loop = $request->getBody()->getContents();
    //                         $response_api_loop = str_replace(" ","",substr($response_api_loop,3));
    //                         $data_json_loop = json_decode($response_api_loop, true);
    //                         foreach($data_json_loop['Files'] AS $key=>$value){

    //                             //dd($value);
    //                             $rules = ['UploadFileID'=>'required|unique:list_media,UploadFileID'];
    //                             $data = ['UploadFileID'=>$value['UploadFileID']];
    //                             $validator = Validator::make($data, $rules);
    //                             if($validator->passes()){
    //                                 $array = array();
    //                                 $array['UploadFileID'] = $value['UploadFileID'];
    //                                 //$array['json_data'] = json_encode($value);
    //                                 $array['status'] = 'publish';
    //                                 ListMedia::create($array);  
    //                             }

    //                         } 

    //                     }/* End Insert List */

    //                 }
    //                 Log::info('End Api List Media');
    //                 $response['msg'] ='200 OK';
    //                 $response['status'] =true;
    //                 $response['DepartmentID'] = $input['DepartmentID'];
    //                 $response['total_page'] = $total_page;
    //                 $response['total_rows'] = $data_json['TotalRows'];
    //                 return  Response::json($response,200);

    //             }else{
    //                 $response['msg'] ='404 Page Not Found';
    //                 $response['status'] =false;
    //                 return  Response::json($response,404);
    //             }

    //         }else{
    //             $response['msg'] ='401 (Unauthorized)';
    //             $response['status'] =false;
    //             return  Response::json($response,401);
    //         }

    //     } catch (\Throwable $e) {
    //         Log::useDailyFiles(storage_path().'/logs/api-errors.log');
    //         Log::error('Api List Media ---> '.$e->getMessage());
    //         $response['msg'] =$e->getMessage();
    //         $response['status'] =false;
    //         return  Response::json($response,500);
    //     }

    // }

    public function postMedia(Request $request)
    {

        try {
            ini_set('max_execution_time', 0);
            set_time_limit(0);


            $token = explode(" ", $request->header('Authorization'));
            $response = array();
            $input = $request->all();
            //dd("Test");
            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api Get Media');
                $task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'get_media']);
                if (isset($task->id)) {
                    $media = ListMedia::select('UploadFileID')->whereRaw('title IS NULL')->limit($task->page_size)->get();
                    //$media = ListMedia::select('UploadFileID')->where('UploadFileID','=','7118b6b4-fe83-ec11-80fa-00155db45613')->limit($task->page_size)->get();
                    if (collect($media)->count()) {
                        $task->update(['note' => 'Page ' . $task->page_no . ' Start']);
                        foreach ($media as $key => $value) {
                            //dd($value->id);
			    $body = '{"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '","UploadFileID":"' . $value->UploadFileID . '"}';
                            //$body = '{"UserName":"'.env('API_USER').'","Password":"'.env('API_PASSWORD').'","UploadFileID":"e63e4091-929a-e611-80db-00155d3d0608"}';
			    $client = new \GuzzleHttp\Client(['verify' =>false]);
                            $request = $client->request('POST', env('URL_GET_MEDIA'), ['body' => $body]);
                            $response_api = $request->getBody()->getContents();
                            $response_api = str_replace(" ", "", substr($response_api, 3));
                            $data_json = json_decode($response_api, true);

                            if (gettype($data_json) == 'array' && $data_json['Success'] == 'true') {

                                //dd($data_json,"Case True");

                                if (gettype($data_json['UploadFile']['Keywords']) == 'array') {
                                    $check_data = 0;
                                    $data_array_check = array("newscliping", "รายงานประจำปี", "รายงานความก้าวหน้า");


                                    /* Api */
                                    $check_data_api = 0;
                                    $setting_api_keywords = Setting::select('value')->where('slug', 'api_keywords')->first();
                                    $setting_api_keywords_array = [];
                                    if (isset($setting_api_keywords->value) && $setting_api_keywords->value != '') {
                                        $setting_api_keywords_array = json_decode($setting_api_keywords->value);
                                    }

                                    /* ncds_2_keywords */
                                    $check_data_ncds_2 = 0;
                                    $setting_ncds_2_keywords = Setting::select('value')->where('slug', 'ncds_2_keywords')->first();
                                    $setting_ncds_2_keywords_array = [];
                                    if (isset($setting_ncds_2_keywords->value) && $setting_ncds_2_keywords->value != '') {
                                        $setting_ncds_2_keywords_array = json_decode($setting_ncds_2_keywords->value);
                                    }

                                    /* ncds_4_keywords */
                                    $check_data_ncds_4 = 0;
                                    $setting_ncds_4_keywords = Setting::select('value')->where('slug', 'ncds_4_keywords')->first();
                                    $setting_ncds_4_keywords_array = [];
                                    if (isset($setting_ncds_4_keywords->value) && $setting_ncds_4_keywords->value != '') {
                                        $setting_ncds_4_keywords_array = json_decode($setting_ncds_4_keywords->value);
                                    }

                                    /* ncds_5_keywords */
                                    $check_data_ncds_5 = 0;
                                    $setting_ncds_5_keywords = Setting::select('value')->where('slug', 'ncds_5_keywords')->first();
                                    $setting_ncds_5_keywords_array = [];
                                    if (isset($setting_ncds_5_keywords->value) && $setting_ncds_5_keywords->value != '') {
                                        $setting_ncds_5_keywords_array = json_decode($setting_ncds_5_keywords->value);
                                    }

                                    /* ncds_6_keywords */
                                    $check_data_ncds_6 = 0;
                                    $setting_ncds_6_keywords = Setting::select('value')->where('slug', 'ncds_6_keywords')->first();
                                    $setting_ncds_6_keywords_array = [];
                                    if (isset($setting_ncds_6_keywords->value) && $setting_ncds_6_keywords->value != '') {
                                        $setting_ncds_6_keywords_array = json_decode($setting_ncds_6_keywords->value);
                                    }


                                    foreach ($data_json['UploadFile']['Keywords'] as $value_check) {
                                        //echo $value;
                                        //echo "<br>";
                                        if (array_keys($data_array_check, $value_check)) {
                                            $check_data = 1;
                                            //echo $value;
                                            //echo "<br>";
                                            //exit();
                                            $array = array();
                                            $array['title'] = 'ข้อมูลไม่ผ่านการคัดกรอง';
                                            $array['description'] = 'check_data->' . $check_data . '---' . json_encode($data_json['UploadFile']['Keywords']);
                                            //dd($array,isset($data_json['UploadFile']['Province']['0']),$data_json['UploadFile']['Province'],gettype($data_json['UploadFile']['Province']),"Case True0");
                                            ListMedia::where('UploadFileID', '=', $data_json['UploadFileID'])->update($array);
                                        }

                                        if (count($setting_api_keywords_array) > 0) {
                                            if (array_keys($setting_api_keywords_array, $value_check)) {
                                                $check_data_api = 1;
                                            }
                                        }

                                        if (count($setting_ncds_2_keywords_array) > 0) {
                                            if (array_keys($setting_ncds_2_keywords_array, $value_check)) {
                                                $check_data_ncds_2 = 1;
                                            }
                                        }

                                        if (count($setting_ncds_4_keywords_array) > 0) {
                                            if (array_keys($setting_ncds_4_keywords_array, $value_check)) {
                                                $check_data_ncds_4 = 1;
                                            }
                                        }
                                        
                                        if (count($setting_ncds_5_keywords_array) > 0) {
                                            if (array_keys($setting_ncds_5_keywords_array, $value_check)) {
                                                $check_data_ncds_5 = 1;
                                            }
                                        }

                                        if (count($setting_ncds_6_keywords_array) > 0) {
                                            if (array_keys($setting_ncds_6_keywords_array, $value_check)) {
                                                $check_data_ncds_6 = 1;
                                            }
                                        }
                                    }
                                    //dd($setting_ncds_5_keywords_array,$check_data_ncds_5,$data_json['UploadFile']['Keywords'],"check_data_ncds_5");

                                    if ($check_data != 1) {
                                        $array = array();
                                        $array['title'] = $data_json['UploadFile']['Title'];
                                        $array['description'] = $data_json['UploadFile']['Description'];
                                        $array['category_id'] = $data_json['UploadFile']['CategoryID'];
                                        $array['province'] = (isset($data_json['UploadFile']['Province']['0']) ? $data_json['UploadFile']['Province']['0'] : '');
                                        $array['template'] = $data_json['UploadFile']['Template'];
                                        $array['area_id'] = $data_json['UploadFile']['AreaID'];
                                        $array['json_data'] = json_encode($data_json['UploadFile']);
                                        $array['file_thumbnail_link'] = $data_json['UploadFile']['ThumbnailAddress'];
                                        if (!empty($data_json['UploadFile']['CoverPath'])) {
                                            $data_json['UploadFile']['ThumbnailAddress'] = $data_json['UploadFile']['CoverPath'];
                                        }
                                        $array['json_data'] = json_encode($data_json['UploadFile']);
                                        //dd($array,isset($data_json['UploadFile']['Province']['0']),$data_json['UploadFile']['Province'],gettype($data_json['UploadFile']['Province']),$data_json['UploadFile'],"Case True1");
                                        ListMedia::where('UploadFileID', '=', $data_json['UploadFileID'])->update($array);
                                        //dd($list_media_data);

                                    }


                                    if ($check_data_api == 1) {

                                        //dd("Check Api");
                                        $check = ListMedia::select('id', 'api')
                                            ->where('UploadFileID', '=', $data_json['UploadFileID'])
                                            ->first();
                                        if (isset($check->id)) {
                                            $status = 'publish';
                                            $data_media = ListMedia::where('UploadFileID', '=', $data_json['UploadFileID'])->firstOrFail();
                                            $data_media->update(['api' => $status]);
                                        }
                                        //dd($data_media);
                                        $data_media->updated_by = 0;
                                        $media_json_data = json_decode($data_media->json_data);
                                        if ($media_json_data->SubProjectCode == null || $media_json_data->SubProjectCode == 'null') {
                                            $media_json_data->SubProjectCode = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->FileSize == null || $media_json_data->FileSize == 'null') {
                                            $media_json_data->FileSize = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->ProjectCode == null || $media_json_data->ProjectCode == 'null') {
                                            $media_json_data->ProjectCode = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->PublishLevel == null || $media_json_data->PublishLevel == 'null') {
                                            $media_json_data->PublishLevel = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->PublishLevelText == null || $media_json_data->PublishLevelText == 'null') {
                                            $media_json_data->PublishLevelText = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->CreativeCommons == null || $media_json_data->CreativeCommons == 'null') {
                                            $media_json_data->CreativeCommons = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->DepartmentID == null || $media_json_data->DepartmentID == 'null') {
                                            $media_json_data->DepartmentID = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->DepartmentName == null || $media_json_data->DepartmentName == 'null') {
                                            $media_json_data->DepartmentName = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->PublishedDate == null || $media_json_data->PublishedDate == 'null') {
                                            $media_json_data->PublishedDate = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->PublishedByName == null || $media_json_data->PublishedByName == 'null') {
                                            $media_json_data->PublishedByName = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->UpdatedDate == null || $media_json_data->UpdatedDate == 'null') {
                                            $media_json_data->UpdatedDate = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->UpdatedByName == null || $media_json_data->UpdatedByName == 'null') {
                                            $media_json_data->UpdatedByName = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        // if($media_json_data->Keywords == null || $media_json_data->Keywords == 'null'){
                                        //     $media_json_data->Keywords = 'not-specified';
                                        //     //dd("Case True",$media_json_data);
                                        // }                                            
                                        if ($media_json_data->Template == null || $media_json_data->Template == 'null') {
                                            $media_json_data->Template = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->CategoryID == null || $media_json_data->CategoryID == 'null') {
                                            $media_json_data->CategoryID = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Category == null || $media_json_data->Category == 'null') {
                                            $media_json_data->Category = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        // if($media_json_data->Issues == null || $media_json_data->Issues == 'null'){
                                        //     $media_json_data->Issues = 'not-specified';
                                        //     //dd("Case True",$media_json_data);
                                        // }
                                        // if($media_json_data->Targets == null || $media_json_data->Targets == 'null'){
                                        //     $media_json_data->Targets = 'not-specified';
                                        //     //dd("Case True",$media_json_data);
                                        // }
                                        if ($media_json_data->Settings == null || $media_json_data->Settings == 'null') {
                                            $media_json_data->Settings = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->AreaID == null || $media_json_data->AreaID == 'null') {
                                            $media_json_data->AreaID = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Area == null || $media_json_data->Area == 'null') {
                                            $media_json_data->Area = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Province == null || $media_json_data->Province == 'null') {
                                            $media_json_data->Province = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Source == null || $media_json_data->Source == 'null') {
                                            $media_json_data->Source = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->ReleasedDate == null || $media_json_data->ReleasedDate == 'null') {
                                            $media_json_data->ReleasedDate = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Creator == null || $media_json_data->Creator == 'null') {
                                            $media_json_data->Creator = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Production == null || $media_json_data->Production == 'null') {
                                            $media_json_data->Production = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Publisher == null || $media_json_data->Publisher == 'null') {
                                            $media_json_data->Publisher = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Publisher == null || $media_json_data->Publisher == 'null') {
                                            $media_json_data->Publisher = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Contributor == null || $media_json_data->Contributor == 'null') {
                                            $media_json_data->Contributor = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Identifier == null || $media_json_data->Identifier == 'null') {
                                            $media_json_data->Identifier = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Language == null || $media_json_data->Language == 'null') {
                                            $media_json_data->Language = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Relation == null || $media_json_data->Relation == 'null') {
                                            $media_json_data->Relation = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Format == null || $media_json_data->Format == 'null') {
                                            $media_json_data->Format = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->IntellectualProperty == null || $media_json_data->IntellectualProperty == 'null') {
                                            $media_json_data->IntellectualProperty = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->OS == null || $media_json_data->OS == 'null') {
                                            $media_json_data->OS = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Owner == null || $media_json_data->Owner == 'null') {
                                            $media_json_data->Owner = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->PeriodStart == null || $media_json_data->PeriodStart == 'null') {
                                            $media_json_data->PeriodStart = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->PeriodEnd == null || $media_json_data->PeriodEnd == 'null') {
                                            $media_json_data->PeriodEnd = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->Duration == null || $media_json_data->Duration == 'null') {
                                            $media_json_data->Duration = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->SystemID == null || $media_json_data->SystemID == 'null') {
                                            $media_json_data->SystemID = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        if ($media_json_data->SystemName == null || $media_json_data->SystemName == 'null') {
                                            $media_json_data->SystemName = 'not-specified';
                                            //dd("Case True",$media_json_data);
                                        }
                                        //$data_media->json_data = json_encode($media_json_data);
                                        $data_media->json_data = $media_json_data;

                                        //dd($data_media);

                                        /*Login*/
                                        $body = '{"username":"' . env('THRC_API_USERNAME') . '","password":"' . env('THRC_API_PASSWORD') . '","device_token":"thrc_backend"}';
                                        //dd($body);
                                        $client = new \GuzzleHttp\Client();
                                        $request = $client->request('POST', env('THRC_URL_API') . env('THRC_URL_API_LOGIN'), [
                                            'headers' => [
                                                'Content-Type' => 'application/json; charset=utf-8'
                                            ],
                                            'body' => $body
                                        ]);
                                        $response_api = $request->getBody()->getContents();
                                        $data_api_json = json_decode($response_api);
                                        //dd($data_api_json);                            

                                        if ($data_api_json->status_code === 200) {

                                            $access_token = $data_api_json->data->access_token;
                                            //dd($access_token);
                                            $body = '{"device_token":"thrc_backend","media_type":"media","status_media":"' . $status . '","media":' . json_encode($data_media) . '}';
                                            //dd($body);
                                            $client = new \GuzzleHttp\Client();
                                            $request = $client->request('POST', env('THRC_URL_API') . env('THRC_URL_API_UPDATE_MEDIA'), [
                                                'headers' => [
                                                    'Content-Type' => 'application/json; charset=utf-8',
                                                    'authorization' => $access_token
                                                ],
                                                'body' => $body
                                            ]);
                                            $response_api = $request->getBody()->getContents();
                                            $data_api_json = json_decode($response_api);
                                            //dd($data_json);
                                        }
                                        //dd("Success");
                                    }

                                    /*ncds-2 ncds_2_keywords อัพเดทสถานการณ์ NCDs */
                                    if ($check_data_ncds_2 == 1) {

                                        $check_data = Article::select('id')
                                            ->where('dol_UploadFileID', '=', $data_json['UploadFileID'])
                                            ->where('page_layout', '=', 'ncds-2')
                                            ->first();

                                        if (!isset($check_data->id)) {
                                            //dd("Test");
                                            $data_article = array();
                                            $data_article['page_layout'] = 'ncds-2';
                                            $data_article['title'] = $data_json['UploadFile']['Title'];
                                            $data_article['description'] = $data_json['UploadFile']['Description'];
                                            $data_article['short_description'] = strip_tags($data_json['UploadFile']['Description']);
                                            $data_article['dol_cover_image'] = $data_json['UploadFile']['ThumbnailAddress'];
                                            $data_article['dol_UploadFileID'] = $data_json['UploadFileID'];
                                            $data_article['dol_url'] = $data_json['UploadFile']['FileAddress'];
                                            $data_article['dol_template'] = $data_json['UploadFile']['Template'];
                                            $data_article['dol_json_data'] = json_encode($data_json['UploadFile']);
                                            $data_article['category_id'] = 0;


                                            $date_year = date('Y-m-d');
                                            $date_year = strtotime($date_year);
                                            $date_year = strtotime("+10 year", $date_year);
                                            $data_article['start_date'] = date("Y-m-d H:i:s");
                                            $data_article['end_date'] = date('Y-m-d H:i:s', $date_year);

                                            //dd($data_article);
                                            Article::create($data_article);
                                            //dd("test2 Sucess");
                                        }
                                        //dd("test2");
                                    }

                                    /*ncds-4 ncds_4_keywords แบบทดสอบทักษะความรอบรู้สุขภาพ*/
                                    if ($check_data_ncds_4 == 1) {

                                        $check_data = Article::select('id')
                                            ->where('dol_UploadFileID', '=', $data_json['UploadFileID'])
                                            ->where('page_layout', '=', 'ncds-4')
                                            ->first();
                                        //dd("Test1");
                                        if (!isset($check_data->id)) {
                                            //dd("Test2");
                                            $data_article = array();
                                            $data_article['page_layout'] = 'ncds-4';
                                            $data_article['title'] = $data_json['UploadFile']['Title'];
                                            $data_article['description'] = $data_json['UploadFile']['Description'];
                                            $data_article['short_description'] = strip_tags($data_json['UploadFile']['Description']);
                                            $data_article['dol_cover_image'] = $data_json['UploadFile']['ThumbnailAddress'];
                                            $data_article['dol_UploadFileID'] = $data_json['UploadFileID'];
                                            $data_article['dol_url'] = $data_json['UploadFile']['FileAddress'];
                                            $data_article['dol_template'] = $data_json['UploadFile']['Template'];
                                            $data_article['dol_json_data'] = json_encode($data_json['UploadFile']);
                                            $data_article['category_id'] = 0;


                                            $date_year = date('Y-m-d');
                                            $date_year = strtotime($date_year);
                                            $date_year = strtotime("+10 year", $date_year);
                                            $data_article['start_date'] = date("Y-m-d H:i:s");
                                            $data_article['end_date'] = date('Y-m-d H:i:s', $date_year);

                                            //dd($data_article);
                                            Article::create($data_article);
                                            //dd("test2 Sucess");
                                        }
                                        //dd("test4");
                                    }

                                    /* ncds_5_keywords สื่อและเครื่องมือ */
                                    if ($check_data_ncds_5 == 1) {

                                        $check_data = Article::select('id')
                                            ->where('dol_UploadFileID', '=', $data_json['UploadFileID'])
                                            ->where('page_layout', '=', 'health-literacy')
                                            ->first();
                                        //dd("Test1");
                                        if (!isset($check_data->id)) {

                                            $data_article = array();
                                            $data_article['page_layout'] = 'health-literacy';
                                            $data_article['title'] = $data_json['UploadFile']['Title'];
                                            $data_article['description'] = $data_json['UploadFile']['Description'];
                                            $data_article['short_description'] = strip_tags($data_json['UploadFile']['Description']);
                                            $data_article['dol_cover_image'] = $data_json['UploadFile']['ThumbnailAddress'];
                                            $data_article['dol_UploadFileID'] = $data_json['UploadFileID'];
                                            $data_article['dol_url'] = $data_json['UploadFile']['FileAddress'];
                                            $data_article['dol_template'] = $data_json['UploadFile']['Template'];
                                            $data_article['dol_json_data'] = json_encode($data_json['UploadFile']);
                                            $data_article['category_id'] = 0;

                                            $json_decode  = $data_json['UploadFile'];
                                            //dd("Test2",$json_decode);
                                            foreach ($json_decode['Issues'] as $value_issues) {
                                                //dd($value_issues->ID);
                                                if ($value_issues['ID'] == 5) {
                                                    #แอลกอฮอล์
                                                    $data_article['category_id'] = 5;
                                                }

                                                if ($value_issues['ID'] == 28) {
                                                    #บุหรี่
                                                    $data_article['category_id'] = 6;
                                                }

                                                if ($value_issues['ID'] == 39) {
                                                    #อาหาร
                                                    $data_article['category_id'] = 7;
                                                }

                                                if ($value_issues['ID'] == 18) {
                                                    #กิจกรรมทางกาย
                                                    $data_article['category_id'] = 8;
                                                }

                                                if ($value_issues['ID'] == 41) {
                                                    #อุบัติเหตุ
                                                    $data_article['category_id'] = 9;
                                                }

                                                if ($value_issues['ID'] == 37) {
                                                    #เพศ เช่น ท้องไม่พร้อม
                                                    $data_article['category_id'] = 10;
                                                }

                                                if ($value_issues['ID'] == 34) {
                                                    #สุขภาพจิต
                                                    $data_article['category_id'] = 11;
                                                }
                                                if ($value_issues['ID'] == 35) {
                                                    #ความสัมพันธ์ (ครอบครัว ชุมชน ปัจจัยแวดล้อม)
                                                    $data_article['category_id'] = 12;
                                                }

                                                if ($value_issues['ID'] == 36) {
                                                    #ความสัมพันธ์ (ครอบครัว ชุมชน ปัจจัยแวดล้อม)
                                                    $data_article['category_id'] = 12;
                                                }

                                                if ($value_issues['ID'] == 27) {
                                                    #สิ่งแวดล้อม
                                                    $data_article['category_id'] = 13;
                                                }

                                                if ($value_issues['ID'] == 33) {
                                                    #สิ่งแวดล้อม
                                                    $data_article['category_id'] = 13;
                                                }

                                                if ($value_issues['ID'] == 49) {
                                                    #สิ่งแวดล้อม
                                                    $data_article['category_id'] = 13;
                                                }

                                                if ($value_issues['ID'] == 16) {
                                                    #อื่นๆ
                                                    $data_article['category_id'] = 14;
                                                }

                                                if ($value_issues['ID'] == 21) {
                                                    #อื่นๆ
                                                    $data_article['category_id'] = 14;
                                                }

                                                if ($value_issues['ID'] == 32) {
                                                    #อื่นๆ
                                                    $data_article['category_id'] = 14;
                                                }

                                                if ($value_issues['ID'] == 42) {
                                                    #อื่นๆ
                                                    $data_article['category_id'] = 14;
                                                }
                                            }


                                            $date_year = date('Y-m-d');
                                            $date_year = strtotime($date_year);
                                            $date_year = strtotime("+10 year", $date_year);
                                            $data_article['start_date'] = date("Y-m-d H:i:s");
                                            $data_article['end_date'] = date('Y-m-d H:i:s', $date_year);

                                            //dd($data_article);
                                            Article::create($data_article);
                                            //dd("test2 Sucess");
                                        }
                                        //dd("test5");
                                    }

                                    /*ncds_6_keywords เครื่องมืออื่นๆ ที่น่าสนใจ*/
                                    if ($check_data_ncds_6 == 1) {

                                        $check_data = Article::select('id')
                                            ->where('dol_UploadFileID', '=', $data_json['UploadFileID'])
                                            ->where('page_layout', '=', 'ncds-6')
                                            ->first();

                                        if (!isset($check_data->id)) {
                                            //dd("Test");
                                            $data_article = array();
                                            $data_article['page_layout'] = 'ncds-6';
                                            $data_article['title'] = $data_json['UploadFile']['Title'];
                                            $data_article['description'] = $data_json['UploadFile']['Description'];
                                            $data_article['short_description'] = strip_tags($data_json['UploadFile']['Description']);
                                            $data_article['dol_cover_image'] = $data_json['UploadFile']['ThumbnailAddress'];
                                            $data_article['dol_UploadFileID'] = $data_json['UploadFileID'];
                                            $data_article['dol_url'] = $data_json['UploadFile']['FileAddress'];
                                            $data_article['dol_template'] = $data_json['UploadFile']['Template'];
                                            $data_article['dol_json_data'] = json_encode($data_json['UploadFile']);
                                            $data_article['category_id'] = 0;


                                            $date_year = date('Y-m-d');
                                            $date_year = strtotime($date_year);
                                            $date_year = strtotime("+10 year", $date_year);
                                            $data_article['start_date'] = date("Y-m-d H:i:s");
                                            $data_article['end_date'] = date('Y-m-d H:i:s', $date_year);

                                            //dd($data_article);
                                            Article::create($data_article);
                                            //dd("test2 Sucess");
                                        }
                                        //dd("test6");
                                    }

                                    //dd("test6 Sucess");




                                    //dd(count($setting_api_keywords_array),$check_data_api,$data_json['UploadFile'],$setting_api_keywords->value,$setting_api_keywords_array,"Case True1");
                                    // $array = array();
                                    // $array['description'] ='check_data->'.$check_data.'---'.json_encode($data_json['UploadFile']['Keywords']);
                                    // ListMedia::where('UploadFileID','=',$data_json['UploadFileID'])->update($array);

                                } else {

                                    $array = array();
                                    $array['title'] = $data_json['UploadFile']['Title'];
                                    $array['description'] = $data_json['UploadFile']['Description'];
                                    $array['category_id'] = $data_json['UploadFile']['CategoryID'];
                                    $array['province'] = (isset($data_json['UploadFile']['Province']['0']) ? $data_json['UploadFile']['Province']['0'] : '');
                                    $array['template'] = $data_json['UploadFile']['Template'];
                                    $array['area_id'] = $data_json['UploadFile']['AreaID'];
                                    $array['json_data'] = json_encode($data_json['UploadFile']);
                                    //dd($array,isset($data_json['UploadFile']['Province']['0']),$data_json['UploadFile']['Province'],gettype($data_json['UploadFile']['Province']),"Case True2");
                                    ListMedia::where('UploadFileID', '=', $data_json['UploadFileID'])->update($array);
                                }

                                $this->UpdateMediaTermStatus($data_json['UploadFileID'], $data_json['UploadFile']['SendMediaTermStatus']);
                                // echo gettype($data_json['UploadFile']['Keywords']);
                                // echo "<pre>";
                                //         print_r($data_json['UploadFile']);
                                // echo "</pre>";
                                //echo "check_data----->".$check_data;
                                //exit();


                            }
                        }

                        $next_page = $task->page_no + 1;
                        $task->update(['page_no' => $next_page, 'note' => 'Page ' . $task->page_no . ' End']);
                        if ($next_page > $task->page_all) {
                            $task->update(['status' => 'end_processes']);
                        }
                    } else {
                        $next_page = $task->page_no + 1;
                        $task->update(['page_no' => $next_page, 'note' => 'Page ' . $task->page_no . ' End']);
                        if ($next_page > $task->page_all) {
                            $task->update(['status' => 'end_processes']);
                        }
                    }
                }

                //$media = ListMedia::select('UploadFileID')->whereRaw('title IS NULL')->limit(1)->get();
                //$media = ListMedia::select('UploadFileID')->whereRaw('title IS NULL')->limit(1)->get();

                //$media = ListMedia::select('id','UploadFileID')->offset($input['offset'])->limit($input['limit'])->get();
                //dd(collect($media)->count());
                //dd($media);

                //dd(collect($media)->count());
                Log::info('End Api Get Media');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                //$response['media'] =$media;
                //$response['input'] =$input;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api Media ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }

    public function UpdateMediaTermStatus($uploadfile_id, $StatusTerm)
    {
        if (!empty($StatusTerm) && $StatusTerm == "สื่อวาระกลาง") {
            $StatusTerm = 50;
        } else 
        if (!empty($StatusTerm) && $StatusTerm == "สื่อวาระกลาง(อยู่ระหว่างพิจารณา)") {
            $StatusTerm = 49;
        } else {
            $StatusTerm = null;
        }
        ListMedia::where('UploadFileID', '=', $uploadfile_id)->update([
            'SendMediaTermStatus' => $StatusTerm
        ]);
    }

    public function postMediaUpdate(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);


            $token = explode(" ", $request->header('Authorization'));
            $response = array();
            $input = $request->all();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api Media Update');

                $task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'update_media']);
                if (isset($task->id)) {

                    $offset = 0;
                    if ($task->page_no != '1') {
                        $offset = ($task->page_no * $task->page_size) - $task->page_size;
                    }
                    $media = ListMedia::select('UploadFileID')->whereRaw('title IS NOT NULL')
                        ->where('title', '!=', 'ข้อมูลไม่ผ่านการคัดกรอง')
                        ->offset($offset)
                        ->limit($task->page_size)
                        ->get();
                    if (collect($media)->count()) {

                        $task->update(['note' => 'Page ' . $task->page_no . ' Start']);
                        foreach ($media as $key => $value) {
                            //dd($value->id);
                            $body = '{"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '","UploadFileID":"' . $value->UploadFileID . '"}';
                            //$body = '{"UserName":"'.env('API_USER').'","Password":"'.env('API_PASSWORD').'","UploadFileID":"e63e4091-929a-e611-80db-00155d3d0608"}';
                            $client = new \GuzzleHttp\Client();
                            $request = $client->request('POST', env('URL_GET_MEDIA'), ['body' => $body]);
                            $response_api = $request->getBody()->getContents();
                            $response_api = str_replace(" ", "", substr($response_api, 3));
                            $data_json = json_decode($response_api, true);


                            if (gettype($data_json) == 'array' && $data_json['Success'] == 'true') {

                                //dd($data_json['UploadFile']);
                                $array = array();
                                $array['json_data'] = json_encode($data_json['UploadFile']);
                                //dd($array,isset($data_json['UploadFile']['Province']['0']),$data_json['UploadFile']['Province'],gettype($data_json['UploadFile']['Province']));
                                ListMedia::where('UploadFileID', '=', $data_json['UploadFileID'])->update($array);
                            }
                        }

                        $next_page = $task->page_no + 1;
                        $task->update(['page_no' => $next_page, 'note' => 'Page ' . $task->page_no . ' End']);
                        if ($next_page > $task->page_all) {
                            $task->update(['status' => 'end_processes']);
                        }
                    } else {
                        $next_page = $task->page_no + 1;
                        $task->update(['page_no' => $next_page, 'note' => 'Page ' . $task->page_no . ' End']);
                        if ($next_page > $task->page_all) {
                            $task->update(['status' => 'end_processes']);
                        }
                    }
                }

                Log::info('End Api Media Update');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                //$response['media'] =$media;
                //$response['input'] =$input;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api Media Update ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }



    public function postTaskMedia(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);


            $token = explode(" ", $request->header('Authorization'));
            $response = array();
            $input = $request->all();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api Task Media');

                $task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'get_media']);
                if (!isset($task->id)) {

                    $media = ListMedia::selectRaw('COUNT(id) AS count')->whereRaw('title IS NULL')->first();
                    if (isset($media->count) && $media->count > 0) {
                        $data = array();
                        $data['api_name'] = 'Get Media ';
                        $data['status'] = 'processes';
                        $data['total'] = $media->count;
                        $data['page_size'] = 2000;
                        $data['page_no'] = 1;
                        $data['page_all'] = ceil($media->count / 2000);
                        $data['params'] = '';
                        $data['api_type'] = 'get_media';
                        ApiLogs::create($data);
                    }
                }

                Log::info('End Api Task Media');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api Task Media ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }


    public function postTaskMediaUpdate(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);


            $token = explode(" ", $request->header('Authorization'));
            $response = array();
            $input = $request->all();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api Task Media Update');

                $task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'update_media']);
                if (!isset($task->id)) {

                    $media = ListMedia::selectRaw('COUNT(id) AS count')->whereRaw('title IS NOT NULL')->first();
                    if (isset($media->count) && $media->count > 0) {
                        $data = array();
                        $data['api_name'] = 'Media Update';
                        $data['status'] = 'processes';
                        $data['total'] = $media->count;
                        $data['page_size'] = 2000;
                        $data['page_no'] = 1;
                        $data['page_all'] = ceil($media->count / 2000);
                        $data['params'] = '';
                        $data['api_type'] = 'update_media';
                        ApiLogs::create($data);
                    }
                }

                Log::info('End Api Task Media Update');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api Task Media Update ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }



    public function postTaskMediaAttribute(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);


            $token = explode(" ", $request->header('Authorization'));
            $response = array();
            $input = $request->all();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api Task MediaAttribute');

                $task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'get_media_attribute']);
                if (!isset($task->id)) {

                    $media = ListMedia::selectRaw('COUNT(id) AS count')->whereRaw('title IS NOT NULL')->first();
                    if (isset($media->count) && $media->count > 0) {
                        $data = array();
                        $data['api_name'] = 'Get Media Attribute';
                        $data['status'] = 'processes';
                        $data['total'] = $media->count;
                        $data['page_size'] = 5000;
                        $data['page_no'] = 1;
                        $data['page_all'] = ceil($media->count / 5000);
                        $data['params'] = '';
                        $data['api_type'] = 'get_media_attribute';
                        ApiLogs::create($data);
                    }
                }

                Log::info('End Api Task Media Attribute');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api Media Attribute ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }




    public function postMediaAttribute(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);


            $token = explode(" ", $request->header('Authorization'));
            $response = array();
            $input = $request->all();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api Get Media Attribute');

                $task = ApiLogs::Data(['status' => ['processes'], 'api_type' => 'get_media_attribute']);
                if (isset($task->id)) {
                    //$task->page_size
                    $offset = 0;
                    if ($task->page_no != '1') {
                        $offset = ($task->page_no * $task->page_size) - $task->page_size;
                    }
                    $media = ListMedia::select('id', 'json_data')->whereRaw('title IS NOT NULL')
                        ->offset($offset)
                        ->limit($task->page_size)
                        ->get();

                    if (collect($media)->count()) {
                        $task->update(['note' => 'Page ' . $task->page_no . ' Start']);

                        foreach ($media as $key => $value) {
                            //dd($value->id);
                            $json = ($value->json_data != '' ? json_decode($value->json_data) : '');
                            ListMediaIssues::where('media_id', '=', $value->id)->delete();
                            ListMediaKeywords::where('media_id', '=', $value->id)->delete();
                            ListMediaTargets::where('media_id', '=', $value->id)->delete();

                            if (gettype($json->Issues) == 'array') {
                                foreach ($json->Issues as $key_issues => $value_issues) {
                                    $array_issues = array();
                                    $array_issues['media_id'] = $value->id;
                                    $array_issues['issues_id'] = $value_issues->ID;
                                    ListMediaIssues::create($array_issues);
                                }
                            }

                            if (gettype($json->Keywords) == 'array') {
                                foreach ($json->Keywords as $key_keywords => $value_keywords) {
                                    //dd($value_keywords);
                                    $array_keywords = array();
                                    $array_keywords['media_id'] = $value->id;
                                    $array_keywords['keyword'] = $value_keywords;
                                    ListMediaKeywords::create($array_keywords);
                                }
                            }

                            if (gettype($json->Targets)  == 'array') {
                                foreach ($json->Targets as $key_target => $value_target) {
                                    $array_target = array();
                                    $array_target['media_id'] = $value->id;
                                    $array_target['target_id'] = $value_target->ID;
                                    ListMediaTargets::create($array_target);
                                }
                            }
                        }

                        $next_page = $task->page_no + 1;
                        $task->update(['page_no' => $next_page, 'note' => 'Page ' . $task->page_no . ' End']);
                        if ($next_page > $task->page_all) {
                            $task->update(['status' => 'end_processes']);
                        }
                    } else {
                        $next_page = $task->page_no + 1;
                        $task->update(['page_no' => $next_page, 'note' => 'Page ' . $task->page_no . ' End']);
                        if ($next_page > $task->page_all) {
                            $task->update(['status' => 'end_processes']);
                        }
                    }
                }


                Log::info('End Api Get Media Attribute');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                //$response['media'] =$media;
                //$response['task'] =$task;
                //$response['offset'] =$offset;
                //$response['json_data'] =$array_target;
                //$response['input'] =$input;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api Get Media Attribute---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }








    // ListMediaIssues::where('media_id','=',$value->id)->delete();
    // ListMediaKeywords::where('media_id','=',$value->id)->delete();
    // ListMediaTargets::where('media_id','=',$value->id)->delete();


    // if(gettype($data_json['UploadFile']['Issues'] =='array')){

    //     foreach ($data_json['UploadFile']['Issues'] as $key_issues => $value_issues){
    //         $array_issues = array();
    //         $array_issues['media_id'] = $value->id;
    //         $array_issues['issues_id'] = $value_issues['ID'];
    //         ListMediaIssues::create($array_issues);
    //     }

    // }

    // if(gettype($data_json['UploadFile']['Targets'] =='array')){

    //     foreach ($data_json['UploadFile']['Targets'] as $key_target => $value_target){
    //         $array_target = array();
    //         $array_target['media_id'] = $value->id;
    //         $array_target['target_id'] = $value_target['ID'];
    //         ListMediaTargets::create($array_target);
    //     }

    // }

    // if(gettype($data_json['UploadFile']['Keywords'] =='array')){

    //     foreach ($data_json['UploadFile']['Keywords'] as $key_keywords => $value_keywords){
    //         //dd($value_keywords);
    //         $array_keywords = array();
    //         $array_keywords['media_id'] = $value->id;
    //         $array_keywords['keyword'] = $value_keywords;
    //         ListMediaKeywords::create($array_keywords);
    //     }

    // }



    public function postListCategory(Request $request)
    {

        try {
            ini_set('max_execution_time', 0);
            set_time_limit(0);

            $token = explode(" ", $request->header('Authorization'));
            $response = array();

            if (Hash::check(env('SECRET'), $token['1'])) {

                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api List Category');
                $input = $request->all();

                $body = '{"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '"}';
                $client = new \GuzzleHttp\Client();
                $request = $client->request('POST', env('URL_LIST_CATEGORY'), ['body' => $body]);
                $response_api = $request->getBody()->getContents();
                $response_api = str_replace(" ", "", substr($response_api, 3));
                $data_json = json_decode($response_api, true);

                //dd($data_json['Categories']);

                if (gettype($data_json) == 'array') {

                    foreach ($data_json['Categories'] as $key => $value) {
                        //dd($value);

                        $rules = ['category_id' => 'required|unique:list_category,category_id'];
                        $data = ['category_id' => $value['ID']];
                        $validator = Validator::make($data, $rules);
                        if ($validator->passes()) {
                            $array = array();
                            $array['category_id'] = $value['ID'];
                            $array['name'] = $value['Name'];
                            $array['status'] = 'publish';
                            ListCategory::create($array);
                        } else {
                            $array = array();
                            $array['name'] = $value['Name'];
                            ListCategory::where('category_id', '=', $value['ID'])->update($array);
                        }
                    }
                }
                Log::info('End Api List Category');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api List Category ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }

    public function postListIssue(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);

            $token = explode(" ", $request->header('Authorization'));
            $response = array();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api List Issue');
                $input = $request->all();

                $body = '{"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '"}';
                $client = new \GuzzleHttp\Client();
                $request = $client->request('POST', env('URL_LIST_ISSUE'), ['body' => $body]);
                $response_api = $request->getBody()->getContents();
                $response_api = str_replace(" ", "", substr($response_api, 3));
                $data_json = json_decode($response_api, true);

                //dd($data_json['Issues']);

                if (gettype($data_json) == 'array') {

                    foreach ($data_json['Issues'] as $key => $value) {
                        //dd($value);

                        $rules = ['issues_id' => 'required|unique:list_issue,issues_id'];
                        $data = ['issues_id' => $value['ID']];
                        $validator = Validator::make($data, $rules);
                        if ($validator->passes()) {
                            $array = array();
                            $array['issues_id'] = $value['ID'];
                            $array['name'] = $value['Name'];
                            $array['status'] = 'publish';
                            ListIssue::create($array);
                        } else {
                            $array = array();
                            $array['name'] = $value['Name'];
                            ListIssue::where('issues_id', '=', $value['ID'])->update($array);
                        }
                    }
                }
                Log::info('End Api List Issue');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api List Issue ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }



    public function postListTarget(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);

            $token = explode(" ", $request->header('Authorization'));
            $response = array();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api List Target');
                $input = $request->all();

                $body = '{"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '"}';
                $client = new \GuzzleHttp\Client();
                $request = $client->request('POST', env('URL_LIST_TARGET'), ['body' => $body]);
                $response_api = $request->getBody()->getContents();
                $response_api = str_replace(" ", "", substr($response_api, 3));
                $data_json = json_decode($response_api, true);

                //dd($data_json);

                if (gettype($data_json) == 'array') {

                    foreach ($data_json['Targets'] as $key => $value) {
                        //dd($value);

                        $rules = ['target_id' => 'required|unique:list_target,target_id'];
                        $data = ['target_id' => $value['ID']];
                        $validator = Validator::make($data, $rules);
                        if ($validator->passes()) {
                            $array = array();
                            $array['target_id'] = $value['ID'];
                            $array['TargetGuoupID'] = $value['TargetGuoupID'];
                            $array['name'] = $value['Name'];
                            $array['status'] = 'publish';
                            ListTarget::create($array);
                        } else {
                            $array = array();
                            $array['name'] = $value['Name'];
                            $array['TargetGuoupID'] = $value['TargetGuoupID'];
                            ListTarget::where('target_id', '=', $value['ID'])->update($array);
                        }
                    }
                }
                Log::info('Start Api List Target');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api List Target ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }

    public function postListSetting(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);

            $token = explode(" ", $request->header('Authorization'));
            $response = array();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api List Setting');
                $input = $request->all();

                $body = '{"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '"}';
                $client = new \GuzzleHttp\Client();
                $request = $client->request('POST', env('URL_LIST_SETTING'), ['body' => $body]);
                $response_api = $request->getBody()->getContents();
                $response_api = str_replace(" ", "", substr($response_api, 3));
                $data_json = json_decode($response_api, true);

                //dd($data_json);

                if (gettype($data_json) == 'array') {

                    foreach ($data_json['Settings'] as $key => $value) {
                        //dd($value);

                        $rules = ['setting_id' => 'required|unique:list_setting,setting_id'];
                        $data = ['setting_id' => $value['ID']];
                        $validator = Validator::make($data, $rules);
                        if ($validator->passes()) {
                            $array = array();
                            $array['setting_id'] = $value['ID'];
                            $array['name'] = $value['Name'];
                            $array['status'] = 'publish';
                            ListSetting::create($array);
                        } else {
                            $array = array();
                            $array['name'] = $value['Name'];
                            ListSetting::where('setting_id', '=', $value['ID'])->update($array);
                        }
                    }
                }
                Log::info('End Api List Setting');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api List Setting ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }


    public function postListArea(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);

            $token = explode(" ", $request->header('Authorization'));
            $response = array();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api List Area');
                $input = $request->all();

                $body = '{"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '"}';
                $client = new \GuzzleHttp\Client();
                $request = $client->request('POST', env('URL_LIST_AREA'), ['body' => $body]);
                $response_api = $request->getBody()->getContents();
                $response_api = str_replace(" ", "", substr($response_api, 3));
                $data_json = json_decode($response_api, true);

                //dd($data_json);

                if (gettype($data_json) == 'array') {

                    foreach ($data_json['Areas'] as $key => $value) {
                        //dd($value);

                        $rules = ['area_id' => 'required|unique:list_area,area_id'];
                        $data = ['area_id' => $value['ID']];
                        $validator = Validator::make($data, $rules);
                        if ($validator->passes()) {
                            $array = array();
                            $array['area_id'] = $value['ID'];
                            $array['name'] = $value['Name'];
                            $array['status'] = 'publish';
                            ListArea::create($array);
                        } else {
                            $array = array();
                            $array['name'] = $value['Name'];
                            ListArea::where('area_id', '=', $value['ID'])->update($array);
                        }
                    }
                }
                Log::info('End Api List Area');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api List Area ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }


    public function postListProvince(Request $request)
    {

        try {

            ini_set('max_execution_time', 0);
            set_time_limit(0);

            $token = explode(" ", $request->header('Authorization'));
            $response = array();

            if (Hash::check(env('SECRET'), $token['1'])) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api List Province');
                $input = $request->all();
                $body = '{"UserName":"' . env('API_USER') . '","Password":"' . env('API_PASSWORD') . '"}';
                $client = new \GuzzleHttp\Client();
                $request = $client->request('POST', env('URL_LIST_PROVINCE'), ['body' => $body]);
                $response_api = $request->getBody()->getContents();
                $response_api = str_replace(" ", "", substr($response_api, 3));
                $data_json = json_decode($response_api, true);

                //dd($data_json);

                if (gettype($data_json) == 'array') {

                    foreach ($data_json['Provinces'] as $key => $value) {
                        //dd($value);

                        $rules = ['province_id' => 'required|unique:list_province,province_id'];
                        $data = ['province_id' => $value['ID']];
                        $validator = Validator::make($data, $rules);
                        if ($validator->passes()) {
                            $array = array();
                            $array['province_id'] = $value['ID'];
                            $array['name'] = $value['Name'];
                            $array['status'] = 'publish';
                            ListProvince::create($array);
                        } else {
                            $array = array();
                            $array['name'] = $value['Name'];
                            ListProvince::where('province_id', '=', $value['ID'])->update($array);
                        }
                    }
                }
                Log::info('End Api List Province');
                $response['msg'] = '200 OK';
                $response['status'] = true;
                return  Response::json($response, 200);
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api List Province ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }





    public function postGenerateKey(Request $request)
    {

        try {

            $token = explode(" ", $request->header('Authorization'));
            $response = array();
            if (explode(":", env('APP_KEY'))['1'] == $token['1']) {
                Log::useDailyFiles(storage_path() . '/logs/api.log');
                Log::info('Start Api GenerateKey');
                $input = $request->all();
                if (isset($input['secret'])) {
                    Log::info('End Api GenerateKey');
                    $response['msg'] = '200 OK';
                    $response['status'] = true;
                    $response['data'] = bcrypt($input['secret']);
                    return  Response::json($response, 200);
                } else {
                    $response['msg'] = '404 Page Not Found';
                    $response['status'] = false;
                    return  Response::json($response, 404);
                }
            } else {
                $response['msg'] = '401 (Unauthorized)';
                $response['status'] = false;
                return  Response::json($response, 401);
            }
        } catch (\Throwable $e) {
            Log::useDailyFiles(storage_path() . '/logs/api-errors.log');
            Log::error('Api List GenerateKey ---> ' . $e->getMessage());
            $response['msg'] = $e->getMessage();
            $response['status'] = false;
            return  Response::json($response, 500);
        }
    }


    public function getTest()
    {

        dd("Test");

        $data = Article::all();
        //dd($data);
        foreach ($data as $key => $value) {
            //dd($value);
            $array = [];
            $array['article_id'] = $value->id;
            $array['UploadFileID'] = $value->dol_UploadFileID;
            $array['json_data'] = $value->dol_json_data;
            $array['title'] = $value->title;
            $array['description'] = $value->short_description;
            $array['featured'] = $value->featured;
            $array['status'] = $value->status;
            $array['created_at'] = $value->created_at;
            $array['updated_at'] = $value->updated_at;
            $array['created_by'] = $value->created_by;
            $array['updated_by'] = $value->updated_by;
            $array['knowledges'] = 1;
            $array['media_campaign'] = 1;
            $array['hit'] = $value->hit;
            $array['article_type'] = 'article';
            $array['slug'] = $value->slug;

            //dd($array);
            if ($value->dol_UploadFileID != '') {
                $check  = ListArticle::select('id')->where('UploadFileID', '=', $value->dol_UploadFileID)->first();
                //dd(isset($check->id));
                if (isset($check->id) === false) {
                    //dd($check);
                    ListArticle::create($array);
                }
            } else {
                ListArticle::create($array);
            }

            //dd("Success");
        }

        dd("Insert Success");






        //    Log::useDailyFiles(storage_path().'/logs/api.log');
        //    Log::info('Showing user profile for user:');



        // $body = '{"PageNo":1,"PageSize":10,"UserName":"thrc-uat","Password":"-8hKazfcwxG-WqA@7WH/MRxatyrdcCS3qt^DrTE-TA","DepartmentID":"10"}';
        // $client = new \GuzzleHttp\Client();
        // $request = $client->request('POST', env('URL_LIST_MEDIA'), ['body' => $body]);    
        // $response_api = $request->getBody()->getContents();
        // $response_api = str_replace(" ","",substr($response_api,3));
        // $data_json = json_decode($response_api, true);
        // echo "<pre>";
        //     print_r($response_api);
        // echo "</pre>";

        // foreach($data_json AS $key=>$value){
        //  dd($value,$key);
        // }
        // dd($data_json['Files']);

        //echo gettype(json_decode($response_api));
        //var_dump(json_decode($response_api, true));

        // $rules = ['id'=>'required'];
        // $data = ['id'=>'fsdfdsfad'];


        // $messages = [
        //     'required' => 'The :attribute field is required.',
        // ];
        // $validator = Validator::make($data, $rules);

        // if($validator->passes()){

        //     echo "True";
        // }else{

        //     echo "False";

        // }
        // dd($validator);

        echo json_last_error();
        echo '<br />';
        echo JSON_ERROR_NONE . ' JSON_ERROR_NONE' . '<br />';
        echo JSON_ERROR_DEPTH . ' JSON_ERROR_DEPTH' . '<br />';
        echo JSON_ERROR_STATE_MISMATCH . ' JSON_ERROR_STATE_MISMATCH' . '<br />';
        echo JSON_ERROR_CTRL_CHAR . ' JSON_ERROR_CTRL_CHAR' . '<br />';
        echo JSON_ERROR_SYNTAX . ' JSON_ERROR_SYNTAX' . '<br />';
        echo JSON_ERROR_UTF8 . ' JSON_ERROR_UTF8' . '<br />';
        echo JSON_ERROR_RECURSION . ' JSON_ERROR_RECURSION' . '<br />';
        echo JSON_ERROR_INF_OR_NAN . ' JSON_ERROR_INF_OR_NAN' . '<br />';
        echo JSON_ERROR_UNSUPPORTED_TYPE . ' JSON_ERROR_UNSUPPORTED_TYPE' . '<br />';
        //dd($result);
    }


    public function getImport()
    {
        dd("Import7");
        $data = DB::table('import7')
            //->select('*')
            //->limit(1)
            ->get();
        //dd("Import7",$data);
        $i = 0;
        foreach ($data as $key => $value) {
            $i++;
            //dd($value);
            $id_ex = explode("/", $value->link);
            $id = base64_decode($id_ex[4]);
            $list_media = ListMedia::where('id', '=', $id)
                ->where('json_data', '!=', '')
                ->where('json_data', '!=', 'null')
                ->first();
            if (isset($list_media->id)) {
                ListMedia::where('id', '=', $list_media->id)->update(['status' => 'publish', 'api' => 'publish', 'web_view' => 1]);
                //dd($list_media->id);
                $json_data = json_decode($list_media->json_data);
                if ($value->template != '') {

                    $template = '';
                    $str = $value->template;
                    $str = preg_replace("/[^A-Za-z0-9.!? ]/", "", $str);
                    $str = preg_replace("/[^A-Za-z0-9.!?\s]/", "", $str);
                    $str = preg_replace("/[^A-Za-z0-9.!?[:space:]]/", "", $str);
                    $str = strtolower($str);
                    $value->template = explode(" ", $str)[0];
                    //dd($value->template);         
                    if ($value->template == 'multimedia') {
                        $template = 'Multimedia';
                    }
                    if ($value->template == 'visual') {
                        $template = 'Visual';
                    }
                    if ($value->template == 'text') {
                        $template = 'Text';
                    }
                    $json_data->Template = $template;
                    ListMedia::where('id', '=', $list_media->id)->update(['template' => $template, 'json_data' => json_encode($json_data)]);

                    //echo $value->template." <---id=".$value->no;
                    //echo "<br>";
                    //ListMedia::where('id','=',$list_media->id)->update([]);

                }

                if ($value->issue != '') {
                    $issues_data = ListIssue::select('issues_id', 'name')
                        ->whereRaw('name like "%' . $value->issue . '%"')->first();
                    $array = [];
                    if (isset($issues_data->issues_id)) {
                        $object = new \Stdclass;
                        $object->ID = $issues_data->issues_id;
                        $object->Name = $issues_data->name;
                        array_push($array, $object);
                        $value->issue  = $array;
                    } else {
                        $data_issues = [];
                        $data_issues['name'] = $value->issue;
                        //$data_issues['issues_id'] = 'ncds-1';
                        $data_issues['status'] = 'publish';
                        $data_issues['parent_id'] = 0;
                        $data_issues['order'] = 0;
                        $issues_id = ListIssue::create($data_issues);
                        //echo var_export($data['issues_id'], true) . " is NOT numeric", PHP_EOL;
                        // $data['issues_id'] = $issues_id->id;
                        ListIssue::where('id', '=', $issues_id->id)->update(['issues_id' => $issues_id->id]);
                        $object = new \Stdclass;
                        $object->ID = $issues_id->id;
                        $object->Name = $value->issue;
                        array_push($array, $object);
                        $value->issue  = $array;
                    }
                    $json_data->Issues = $value->issue;
                    //dd($json_data);
                    ListMedia::where('id', '=', $list_media->id)->update(['json_data' => json_encode($json_data)]);
                }
                //print_r($value->issue);
                //echo " <---id=".$value->no;
                //echo "<br>";

                if ($value->age != '') {
                    $age_ex = explode(" ", $value->age);
                    //dd($value->age,$age_ex);
                    $value->age = [(int)$age_ex[1]];
                    ListMedia::where('id', '=', $list_media->id)->update(['age' => json_encode($value->age)]);
                    //dd($value->age);
                }
                // echo $value->age." <---id=".$value->no;
                // echo "<br>";

                if ($value->target != '') {
                    $target_ex = explode('(', $value->target);
                    // print_r($target_ex);
                    // echo " <---id=".$value->no;
                    // echo "<br>";

                    if (count($target_ex) > 2) {
                        //dd($target_ex);
                        $array = [];
                        $target_data = ListTarget::select('target_id', 'name')
                            ->whereRaw('name like "%' . str_replace(" ", "", $target_ex[0]) . '%"')->first();
                        if (isset($target_data->target_id)) {
                            $object = new \Stdclass;
                            $object->ID = $target_data->target_id;
                            $object->Name = $target_data->name;
                            array_push($array, $object);
                            //dd($target_data,$value->target);
                        }
                        $target2 = explode(",", $target_ex[1]);
                        $target_data = ListTarget::select('target_id', 'name')
                            ->whereRaw('name like "%' . str_replace(" ", "", $target2[1]) . '%"')->first();
                        if (isset($target_data->target_id)) {
                            $object = new \Stdclass;
                            $object->ID = $target_data->target_id;
                            $object->Name = $target_data->name;
                            array_push($array, $object);
                            //dd($target_data,$value->target);
                        }
                        $value->target = $array;
                        //dd($value->target);
                    } else {
                        if ($target_ex[0] == 'ทุกช่วงวัย') {
                            $array = [];
                            $object = new \Stdclass;
                            $object->ID = 13;
                            $object->Name = 'ปฐมวัย(0–5ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 24;
                            $object->Name = 'วัยเรียน(6–12ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 26;
                            $object->Name = 'วัยรุ่น(13–15ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 4;
                            $object->Name = 'เยาวชน(15-20 ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 25;
                            $object->Name = 'วัยทำงาน(21-59 ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 19;
                            $object->Name = 'ผู้สูงอายุ(60ปีขึ้นไป)';
                            array_push($array, $object);
                            $value->target  = $array;
                            //dd($value->target);
                        } else {
                            $array = [];
                            $target_data = ListTarget::select('target_id', 'name')
                                ->whereRaw('name like "%' . str_replace(" ", "", $target_ex[0]) . '%"')->first();

                            if (isset($target_data->target_id)) {
                                $object = new \Stdclass;
                                $object->ID = $target_data->target_id;
                                $object->Name = $target_data->name;
                                array_push($array, $object);
                                $value->target  = $array;
                                //dd($target_data,$value->target);
                            }
                        }
                    }
                    //dd($value->target);
                    $json_data->Targets = $value->target;
                    //dd($json_data);
                    ListMedia::where('id', '=', $list_media->id)->update(['json_data' => json_encode($json_data)]);
                    //ปฐมวัย(0–5ปี) = 13
                    //วัยเรียน(6–12ปี) = 24
                    //วัยรุ่น(13–15ปี) = 26
                    //เยาวชน(15-20 ปี) = 4
                    //วัยทำงาน(21-59 ปี) = 25
                    //ผู้สูงอายุ(60ปีขึ้นไป) = 19
                    // print_r($value->target);
                    // echo " <---id=".$value->no;
                    // echo "<br>";
                }

                if ($value->sex != '') {
                    $sex_ex = explode(" ", $value->sex);
                    //dd($value->age,$sex_ex);
                    $value->sex = $sex_ex[0];

                    if ($value->sex == 'ทุกเพศ') {
                        $value->sex = [1, 2, 3];
                    }

                    if ($value->sex == 'ผู้หญิง') {
                        $value->sex = [2];
                    }

                    if ($value->sex == 'ผู้ชาย') {
                        $value->sex = [1];
                    }
                    //dd($value->sex);
                    ListMedia::where('id', '=', $list_media->id)->update(['sex' => json_encode($value->sex)]);
                    // print_r($value->sex);
                    // echo " <---id=".$value->no;
                    // echo "<br>";

                }
                dd($json_data);
                if ($value->keyword != '') {
                    $keyword_ex = explode(",", $value->keyword);
                    $keyword_ex2 = explode("/", $value->keyword);

                    if (count($keyword_ex2) > 1) {
                        //dd(count($keyword_ex2),$keyword_ex2,$value->keyword);
                        // print_r($keyword_ex2);
                        // echo " <---id=".$value->no;
                        // echo "<br>";
                        $array = [];
                        foreach ($keyword_ex2 as $key => $value_keyword) {
                            //dd($value);
                            array_push($array, str_replace(" ", "", $value_keyword));
                        }
                        $value->keyword = $array;
                    } else {
                        // print_r($keyword_ex);
                        // echo " <---id=".$value->no;
                        // echo "<br>";
                        $array = [];
                        foreach ($keyword_ex as $key => $value_keyword) {
                            //dd($value);
                            array_push($array, str_replace(" ", "", $value_keyword));
                        }
                        //dd(json_encode($array),$value->keyword);
                        $value->keyword = $array;
                    }
                    //dd($value->keyword);
                    $json_data->Keywords = $value->keyword;
                    //dd($json_data);
                    ListMedia::where('id', '=', $list_media->id)->update(['json_data' => json_encode($json_data)]);
                    //dd($value->age,$keyword_ex);
                    // print_r($value->keyword);
                    // echo " <---id=".$value->no;
                    // echo "<br>";
                }
                //dd($issues_data,$value->issue);
                //dd($json_data,$list_media->id);
            }
            //dd($value,$id_ex,$id,$list_media,$json_data);
        }
        dd("Success", $i);
    }


    public function getImport202()
    {
        dd("getImport202");
        $data = DB::table('import202')
            //->select('*')
            //->limit(1)
            ->get();
        //dd("getImport202",$data);
        $i = 0;
        foreach ($data as $key => $value) {
            $i++;
            //dd($value);
            $id_ex = explode("/", $value->link);
            //dd($id_ex);
            if ($id_ex[3] == 'media2') {
                $id = base64_decode($id_ex[4]);
                $list_media = ListMedia::where('id', '=', $id)
                    //->where('json_data','!=','')
                    //->where('json_data','!=','null')
                    ->first();
                if (isset($list_media->id)) {
                    //dd($list_media,"Case 1");
                    echo "Case 1";
                    echo "<br>";
                    $data_insert = [];
                    $data_insert['title'] = $list_media->title;
                    $data_insert['UploadFileID'] = $list_media->UploadFileID;
                    DB::table('list_media_202')->insert($data_insert);
                } else {

                    echo "Case 2";
                    echo "<br>";
                    $data_insert = [];
                    $data_insert['title'] = $value->title;
                    //$data_insert['issues_id'] = 'ncds-1';
                    DB::table('list_media_202')->insert($data_insert);
                }
            } else {

                $id = Hashids::decode($id_ex[4]);
                // echo "Case 1.1";
                // print_r($value->title);
                // print_r($id);
                // echo "<br>";
                //dd($value,$id_ex[4],$id[0],"Case 2");
                $list_media = ListMedia::where('id', '=', $id[0])
                    //->where('json_data','!=','')
                    //->where('json_data','!=','null')
                    ->first();
                if (isset($list_media->id)) {
                    echo "Case 1.1";
                    echo "<br>";
                    $data_insert = [];
                    $data_insert['title'] = $list_media->title;
                    $data_insert['UploadFileID'] = $list_media->UploadFileID;
                    DB::table('list_media_202')->insert($data_insert);
                } else {

                    echo "Case 2.2";
                    echo "<br>";
                    $data_insert = [];
                    $data_insert['title'] = $value->title;
                    //$data_insert['issues_id'] = 'ncds-1';
                    DB::table('list_media_202')->insert($data_insert);
                }
            }

            //dd($value,$id_ex,$id,$list_media,$json_data);
        }
        dd("Success", $i);
    }


    public function getMedia202()
    {
        dd("Get Media 202");

        try {

            $data = DB::table('list_media_202')
                //->select('*')
                //->limit(2)
                ->where('status', '=', 'publish')
                ->where('json_data', '=', NULL)
                ->get();
            //dd($data);
            foreach ($data as $key => $value) {
                //dd($value);

                $body = '{"UserName":"' . env('API_USER', 'thrc-pro') . '","Password":"' . env('API_PASSWORD', 'sHdd-eMW_wa_cZht748K$2^$Y2_Hyk6jc3') . '","UploadFileID":"' . $value->UploadFileID . '"}';

                $client = new \GuzzleHttp\Client();
                $request = $client->request('POST', env('URL_GET_MEDIA', 'http://dol.thaihealth.or.th/WCF/DOLService.svc/json/GetMediaDol'), ['body' => $body]);
                $response_api = $request->getBody()->getContents();
                $response_api = str_replace(" ", "", substr($response_api, 3));
                $data_json = json_decode($response_api, true);

                if (gettype($data_json) == 'array' && $data_json['Success'] == 'true') {

                    $array = array();
                    $array['title'] = $data_json['UploadFile']['Title'];
                    $array['description'] = $data_json['UploadFile']['Description'];
                    $array['category_id'] = $data_json['UploadFile']['CategoryID'];
                    $array['province'] = (isset($data_json['UploadFile']['Province']['0']) ? $data_json['UploadFile']['Province']['0'] : '');
                    $array['template'] = $data_json['UploadFile']['Template'];
                    $array['area_id'] = $data_json['UploadFile']['AreaID'];
                    $array['json_data'] = json_encode($data_json['UploadFile']);
                    //ListMedia::where('UploadFileID','=',$data_json['UploadFileID'])->update($array);
                    DB::table('list_media_202')->where('UploadFileID', '=', $data_json['UploadFileID'])->update($array);
                    //dd($value);
                }
            }
            dd("Update Success");
        } catch (\Throwable $e) {
            dd($e->getMessage(), $body);
        }
    }

    public function getUpdateMedia202()
    {
        dd("Get Update Media 202");

        try {

            $data = DB::table('list_article_api_backup_27_4_2022')
                //->select('*')
                //->limit(2)
                ->where('status', '=', 'publish')
                ->get();
            $i = 1;
            foreach ($data as $key => $value) {
                //dd($value);
                $list_media = ListMedia::where('UploadFileID', '=', $value->UploadFileID)
                    ->first();
                //dd($list_media,$value);
                if (isset($list_media->id)) {
                    $media_json_data = json_decode($list_media->json_data);
                    $media_json_data_new = new \stdClass();
                    $media_json_data_new->Issues = (isset($media_json_data->Issues) ? $media_json_data->Issues : '');
                    $media_json_data_new->Targets = (isset($media_json_data->Targets) ? $media_json_data->Targets : '');
                    $media_json_data_new->Settings = (isset($media_json_data->Settings) ? $media_json_data->Settings : '');
                    $media_json_data_new->Keywords = (isset($media_json_data->Keywords) ? $media_json_data->Keywords : '');
                    $media_json_data_new->ThumbnailAddress = (isset($media_json_data->ThumbnailAddress) ? $media_json_data->ThumbnailAddress : '');
                    // $media_json_data_new->UploadFileID = (isset($media_json_data->UploadFileID) ? $media_json_data->UploadFileID : '');
                    //dd($media_json_data_new);        
                    //ListMedia::where('id','=',$list_media->id)->update(['json_data'=>$media_json_data_new]); 
                    DB::table('list_article_api_backup_27_4_2022')
                        ->where('UploadFileID', '=', $value->UploadFileID)
                        //->where('article_type','=','media')
                        ->update(['json_data' => json_encode($media_json_data_new)]);
                    //dd("success");
                    $i++;
                }
            }

            dd("Update Success", $i);
        } catch (\Throwable $e) {
            dd($e->getMessage());
        }
    }


    public function getImport2()
    {
        dd("getImport2");
        $data = DB::table('import202')
            //->select('*')
            ->limit(1)
            ->get();
        dd("getImport2", $data);
        $i = 0;
        foreach ($data as $key => $value) {

            //dd($value);

            $id_ex = explode("/", $value->link);
            if ($id_ex[3] == 'media2') {
                $id = base64_decode($id_ex[4]);
                $list_media = ListMedia::where('id', '=', $id)
                    ->where('json_data', '!=', '')
                    ->where('json_data', '!=', 'null')
                    ->first();
            } else {
                $id = Hashids::decode($id_ex[4]);
                $list_media = ListMedia::where('id', '=', $id[0])
                    ->where('json_data', '!=', '')
                    ->where('json_data', '!=', 'null')
                    ->first();
            }

            if (isset($list_media->id)) {
                $i++;
                ListMedia::where('id', '=', $list_media->id)->update(['status' => 'publish', 'api' => 'publish', 'web_view' => 1]);
                //dd($list_media->id);
                $json_data = json_decode($list_media->json_data);


                if ($value->target != '') {
                    $target_ex = explode('(', $value->target);
                    // print_r($target_ex);
                    // echo " <---id=".$value->no;
                    // echo "<br>";

                    if (count($target_ex) > 2) {
                        //dd($target_ex);
                        $array = [];
                        $target_data = ListTarget::select('target_id', 'name')
                            ->whereRaw('name like "%' . str_replace(" ", "", $target_ex[0]) . '%"')->first();
                        if (isset($target_data->target_id)) {
                            array_push($array, (int)$target_data->target_id);
                            //dd($target_data,$value->target);
                        }
                        $target2 = explode(",", $target_ex[1]);
                        $target_data = ListTarget::select('target_id', 'name')
                            ->whereRaw('name like "%' . str_replace(" ", "", $target2[1]) . '%"')->first();
                        if (isset($target_data->target_id)) {
                            array_push($array, (int)$target_data->target_id);
                            //dd($target_data,$value->target);
                        }
                        ListMedia::where('id', '=', $list_media->id)->update(['age' => json_encode($array)]);
                        //dd($value->target);
                    } else {
                        if ($target_ex[0] == 'ทุกช่วงวัย') {
                            $array = [];
                            $object = new \Stdclass;
                            $object->ID = 13;
                            $object->Name = 'ปฐมวัย(0–5ปี)';
                            array_push($array, 13);
                            $object = new \Stdclass;
                            $object->ID = 24;
                            $object->Name = 'วัยเรียน(6–12ปี)';
                            array_push($array, 24);
                            $object = new \Stdclass;
                            $object->ID = 26;
                            $object->Name = 'วัยรุ่น(13–15ปี)';
                            array_push($array, 26);
                            $object = new \Stdclass;
                            $object->ID = 4;
                            $object->Name = 'เยาวชน(15-20 ปี)';
                            array_push($array, 4);
                            $object = new \Stdclass;
                            $object->ID = 25;
                            $object->Name = 'วัยทำงาน(21-59 ปี)';
                            array_push($array, 25);
                            $object = new \Stdclass;
                            $object->ID = 19;
                            $object->Name = 'ผู้สูงอายุ(60ปีขึ้นไป)';
                            array_push($array, 19);
                            ListMedia::where('id', '=', $list_media->id)->update(['age' => json_encode($array)]);
                        } else {
                            $array = [];
                            $target_data = ListTarget::select('target_id', 'name')
                                ->whereRaw('name like "%' . str_replace(" ", "", $target_ex[0]) . '%"')->first();

                            if (isset($target_data->target_id)) {
                                $object = new \Stdclass;
                                $object->ID = $target_data->target_id;
                                $object->Name = $target_data->name;
                                array_push($array, (int)$target_data->target_id);
                                //dd($target_data,$value->target);
                                ListMedia::where('id', '=', $list_media->id)->update(['age' => json_encode($array)]);
                            }
                        }
                    }

                    //ปฐมวัย(0–5ปี) = 13
                    //วัยเรียน(6–12ปี) = 24
                    //วัยรุ่น(13–15ปี) = 26
                    //เยาวชน(15-20 ปี) = 4
                    //วัยทำงาน(21-59 ปี) = 25
                    //ผู้สูงอายุ(60ปีขึ้นไป) = 19
                    // print_r($value->target);
                    // echo " <---id=".$value->no;
                    // echo "<br>";
                }

                // if($value->sex !=''){
                //     $sex_ex = explode(" ",$value->sex);
                //     //dd($value->age,$sex_ex);
                //     $value->sex = $sex_ex[0];

                //     if($value->sex =='ทุกเพศ'){
                //         $value->sex = [1,2,3];
                //     }

                //     if($value->sex =='ผู้หญิง'){
                //         $value->sex = [2];
                //     }

                //     if($value->sex =='ผู้ชาย'){
                //         $value->sex = [1];
                //     }
                //     //dd($value->sex);
                //     ListMedia::where('id','=',$list_media->id)->update(['sex'=>json_encode($value->sex)]);
                //     // print_r($value->sex);
                //     // echo " <---id=".$value->no;
                //     // echo "<br>";

                // }

                if ($value->keyword != '') {
                    $keyword_ex = explode(",", $value->keyword);
                    $keyword_ex2 = explode("/", $value->keyword);

                    if (count($keyword_ex2) > 1) {
                        //dd(count($keyword_ex2),$keyword_ex2,$value->keyword);
                        // print_r($keyword_ex2);
                        // echo " <---id=".$value->no;
                        // echo "<br>";
                        $array = [];
                        foreach ($keyword_ex2 as $key => $value_keyword) {
                            //dd($value);
                            array_push($array, str_replace(" ", "", $value_keyword));
                        }
                        $value->keyword = $array;
                    } else {
                        // print_r($keyword_ex);
                        // echo " <---id=".$value->no;
                        // echo "<br>";
                        $array = [];
                        foreach ($keyword_ex as $key => $value_keyword) {
                            //dd($value);
                            array_push($array, str_replace(" ", "", $value_keyword));
                        }
                        //dd(json_encode($array),$value->keyword);
                        $value->keyword = $array;
                    }
                    //dd($value->keyword);
                    $json_data->Keywords = $value->keyword;
                    //dd($json_data);
                    ListMedia::where('id', '=', $list_media->id)->update(['json_data' => json_encode($json_data)]);
                    //dd($value->age,$keyword_ex);
                    // print_r($value->keyword);
                    // echo " <---id=".$value->no;
                    // echo "<br>";
                }
                //dd($issues_data,$value->issue);
                //dd($json_data,$list_media->id);
            }
            //dd($value,$id_ex,$id,$list_media,$json_data);
        }
        dd("Success", $i);
    }


    public function getImport3()
    {
        dd("getImport3");
        $data = DB::table('list_media_api_webview')
            //->select('*')
            //->limit(2)
            ->get();
        //dd("getImport3",$data);
        $i = 0;
        foreach ($data as $key => $value) {
            $json_data = json_decode($value->json_data);
            //dd($value,$json_data,json_decode($value->sex));

            $Issues_array = [];
            if (isset($json_data->Issues)) {
                foreach ($json_data->Issues as $value_issues) {
                    //dd($value_issues);
                    if (isset($value_issues->Name)) {
                        array_push($Issues_array, $value_issues->Name);
                    }
                }
            }
            $Targets_array = [];
            if (isset($json_data->Targets)) {
                foreach ($json_data->Targets as $value_targets) {
                    //dd($value_issues);
                    if (isset($value_targets->Name)) {
                        array_push($Targets_array, $value_targets->Name);
                    }
                }
            }
            $Settings_array = [];
            if (isset($json_data->Settings)) {
                foreach ($json_data->Settings as $value_settings) {
                    //dd($value_issues);
                    if (isset($value_settings->Name)) {
                        array_push($Settings_array, $value_settings->Name);
                    }
                }
            }

            $sex_text = [];
            if ($value->sex != '') {
                foreach (json_decode($value->sex) as $value_sex) {
                    //dd($value_issues);
                    $text = '';
                    if ($value_sex == 1) {
                        $text = 'ชาย';
                    }
                    if ($value_sex == 2) {
                        $text = 'หญิง';
                    }
                    if ($value_sex == 3) {
                        $text = 'หลากหลายทางเพศ';
                    }
                    array_push($sex_text, $text);
                }
            }

            $age_text = [];
            if ($value->age != '') {
                foreach (json_decode($value->age) as $value_age) {
                    //dd($value_issues);
                    $text = '';
                    if ($value_age == 4) {
                        $text = 'เยาวชน(15–24ปี)';
                    }
                    if ($value_age == 13) {
                        $text = 'ปฐมวัย(0–5ปี)';
                    }
                    if ($value_age == 19) {
                        $text = 'ผู้สูงอายุ(60ปีขึ้นไป)';
                    }
                    if ($value_age == 24) {
                        $text = 'วัยเรียน(6–12ปี)';
                    }
                    if ($value_age == 25) {
                        $text = 'วัยทำงาน(15-59ปี)';
                    }
                    if ($value_age == 26) {
                        $text = 'วัยรุ่น(13–15ปี)';
                    }
                    array_push($age_text, $text);
                }
            }
            //dd($age_text);


            //dd($Issues_array,implode(",",$Issues_array));
            DB::table('list_media_api_webview')->where('id', '=', $value->id)->update(['issue' => implode(",", $Issues_array), 'target' => implode(",", $Targets_array), 'setting' => implode(",", $Settings_array), 'keyword' => (isset($json_data->Keywords) ? implode(",", $json_data->Keywords) : ''), 'sex_text' => implode(",", $sex_text), 'age_text' => implode(",", $age_text), 'department' => (isset($json_data->DepartmentName) ? $json_data->DepartmentName : '')]);
        }
        dd("Success", $i);
    }


    public function getImportMobile()
    {
        //dd("getImportMobile");
        try {
            $data = DB::table('import202')
                //->select('*')
                //->limit(1)
                ->get();
            //dd("getImportMobile",$data);
            $i = 0;
            foreach ($data as $key => $value) {

                //dd($value);
                $id_ex = explode("/", $value->link);

                if ($id_ex[3] == 'media2') {
                    $id = base64_decode($id_ex[4]);
                    $list_media = DB::table('list_article_api_backup_30_3_2022')->where('article_id', '=', $id)
                        ->where('json_data', '!=', '')
                        ->where('json_data', '!=', 'null')
                        ->first();
                } else {
                    $id = Hashids::decode($id_ex[4]);
                    $list_media = DB::table('list_article_api_backup_30_3_2022')->where('article_id', '=', $id)
                        ->where('json_data', '!=', '')
                        ->where('json_data', '!=', 'null')
                        ->first();
                }


                //dd($list_media);
                if (isset($list_media->id)) {
                    $i++;
                    DB::table('list_article_api_backup_30_3_2022')->where('article_id', '=', $list_media->article_id)->update(['status' => 'publish']);
                    //dd($list_media->id);
                    $json_data = json_decode($list_media->json_data);


                    if ($value->target != '') {
                        $target_ex = explode('(', $value->target);
                        // print_r($target_ex);
                        // echo " <---id=".$value->no;
                        // echo "<br>";

                        if (count($target_ex) > 2) {
                            //dd($target_ex);
                            $array = [];
                            $target_data = ListTarget::select('target_id', 'name')
                                ->whereRaw('name like "%' . str_replace(" ", "", $target_ex[0]) . '%"')->first();
                            if (isset($target_data->target_id)) {
                                array_push($array, (int)$target_data->target_id);
                                //dd($target_data,$value->target);
                            }
                            $target2 = explode(",", $target_ex[1]);
                            $target_data = ListTarget::select('target_id', 'name')
                                ->whereRaw('name like "%' . str_replace(" ", "", $target2[1]) . '%"')->first();
                            if (isset($target_data->target_id)) {
                                array_push($array, (int)$target_data->target_id);
                                //dd($target_data,$value->target);
                            }
                            DB::table('list_article_api_backup_30_3_2022')->where('article_id', '=', $list_media->article_id)->update(['age' => json_encode($array)]);
                            //dd($value->target);
                        } else {
                            if ($target_ex[0] == 'ทุกช่วงวัย') {
                                $array = [];
                                $object = new \Stdclass;
                                $object->ID = 13;
                                $object->Name = 'ปฐมวัย(0–5ปี)';
                                array_push($array, 13);
                                $object = new \Stdclass;
                                $object->ID = 24;
                                $object->Name = 'วัยเรียน(6–12ปี)';
                                array_push($array, 24);
                                $object = new \Stdclass;
                                $object->ID = 26;
                                $object->Name = 'วัยรุ่น(13–15ปี)';
                                array_push($array, 26);
                                $object = new \Stdclass;
                                $object->ID = 4;
                                $object->Name = 'เยาวชน(15-20 ปี)';
                                array_push($array, 4);
                                $object = new \Stdclass;
                                $object->ID = 25;
                                $object->Name = 'วัยทำงาน(21-59 ปี)';
                                array_push($array, 25);
                                $object = new \Stdclass;
                                $object->ID = 19;
                                $object->Name = 'ผู้สูงอายุ(60ปีขึ้นไป)';
                                array_push($array, 19);
                                DB::table('list_article_api_backup_30_3_2022')->where('article_id', '=', $list_media->article_id)->update(['age' => json_encode($array)]);
                            } else {
                                $array = [];
                                $target_data = ListTarget::select('target_id', 'name')
                                    ->whereRaw('name like "%' . str_replace(" ", "", $target_ex[0]) . '%"')->first();

                                if (isset($target_data->target_id)) {
                                    $object = new \Stdclass;
                                    $object->ID = $target_data->target_id;
                                    $object->Name = $target_data->name;
                                    array_push($array, (int)$target_data->target_id);
                                    //dd($target_data,$value->target);
                                    DB::table('list_article_api_backup_30_3_2022')->where('article_id', '=', $list_media->article_id)->update(['age' => json_encode($array)]);
                                }
                            }
                        }

                        //ปฐมวัย(0–5ปี) = 13
                        //วัยเรียน(6–12ปี) = 24
                        //วัยรุ่น(13–15ปี) = 26
                        //เยาวชน(15-20 ปี) = 4
                        //วัยทำงาน(21-59 ปี) = 25
                        //ผู้สูงอายุ(60ปีขึ้นไป) = 19
                        // print_r($value->target);
                        // echo " <---id=".$value->no;
                        // echo "<br>";
                    }

                    if ($value->sex != '') {
                        $sex_ex = explode(" ", $value->sex);
                        //dd($value->age,$sex_ex);
                        $value->sex = $sex_ex[0];

                        if ($value->sex == 'ทุกเพศ') {
                            $value->sex = [1, 2, 3];
                        }

                        if ($value->sex == 'ผู้หญิง') {
                            $value->sex = [2];
                        }

                        if ($value->sex == 'ผู้ชาย') {
                            $value->sex = [1];
                        }
                        //dd($value->sex);
                        DB::table('list_article_api_backup_30_3_2022')->where('article_id', '=', $list_media->article_id)->update(['sex' => json_encode($value->sex)]);
                        // print_r($value->sex);
                        // echo " <---id=".$value->no;
                        // echo "<br>";
                    }

                    //dd($issues_data,$value->issue);
                    //dd($json_data,$list_media->id);
                } else {
                    // print_r($value->title);
                    // echo "<br>";
                    if ($id_ex[3] == 'media2') {
                        $id = base64_decode($id_ex[4]);
                        $list_media = DB::table('list_article')->where('article_id', '=', $id)
                            ->where('json_data', '!=', '')
                            ->where('json_data', '!=', 'null')
                            ->first();
                    } else {
                        $id = Hashids::decode($id_ex[4]);
                        $list_media = DB::table('list_article')->where('article_id', '=', $id)
                            ->where('json_data', '!=', '')
                            ->where('json_data', '!=', 'null')
                            ->first();
                    }
                    if (isset($list_media->id)) {
                        //dd($list_media);
                        $i++;
                        $data_insert = [];
                        $data_insert['article_id'] = $list_media->article_id;
                        $data_insert['title'] = $list_media->title;
                        $data_insert['description'] = $list_media->description;
                        $data_insert['featured'] = $list_media->featured;
                        $data_insert['template'] = $list_media->template;
                        $data_insert['UploadFileID'] = $list_media->UploadFileID;
                        $data_insert['json_data'] = $list_media->json_data;
                        $data_insert['status'] = $list_media->status;
                        $data_insert['created_at'] = $list_media->created_at;
                        $data_insert['updated_at'] = $list_media->updated_at;
                        $data_insert['created_by'] = $list_media->created_by;
                        $data_insert['updated_by'] = $list_media->updated_by;
                        $data_insert['hit'] = $list_media->hit;
                        $data_insert['download'] = $list_media->download;
                        $data_insert['knowledges'] = $list_media->knowledges;
                        $data_insert['media_campaign'] = $list_media->media_campaign;
                        $data_insert['article_type'] = $list_media->article_type;
                        $data_insert['slug'] = $list_media->slug;
                        $data_insert['sex'] = $list_media->sex;
                        $data_insert['age'] = $list_media->age;
                        $data_insert['tags'] = $list_media->tags;
                        //$data_insert['web_view'] = $list_media->web_view;
                        $data_insert['image_path'] = $list_media->image_path;
                        //dd($data_insert);
                        DB::table('list_article_api_backup_30_3_2022')->insert($data_insert);
                    }
                    //dd($list_media);
                }

                //dd($value,$id_ex,$id,$list_media,$json_data);
            }
        } catch (\Throwable $e) {
            dd($e->getMessage());
        }
        dd("Success", $i);
    }


    public function getUpdate7()
    {
        dd("Update7");
        $data = DB::table('update7')
            //->select('*')
            //->limit(1)
            ->get();
        //dd("Update7",$data);
        $i = 0;
        foreach ($data as $key => $value) {
            $i++;
            //dd($value);
            $id_ex = explode("/", $value->link);
            $id = base64_decode($id_ex[4]);
            $list_media = ListMedia::where('id', '=', $id)
                ->where('json_data', '!=', '')
                ->where('json_data', '!=', 'null')
                ->first();
            if (isset($list_media->id)) {

                //dd($value,$list_media);
                ListMedia::where('id', '=', $list_media->id)->update(['status' => 'publish', 'web_view' => 1, 'featured' => 2]);
            }
            //dd($value,$id_ex,$id,$list_media,$json_data);
        }
        dd("Success", $i);
    }


    public function getImportRecommend()
    {
        dd("getImportRecommend");
        $data = DB::table('import_recommend')
            //->select('*')
            //->limit(1)
            ->get();
        //dd("getImportRecommend",$data);
        $i = 0;
        foreach ($data as $key => $value) {
            $i++;
            //dd($value);
            $id_ex = explode("/", $value->link);
            $id = base64_decode($id_ex[4]);
            $list_media = ListMedia::where('id', '=', $id)
                ->where('json_data', '!=', '')
                ->where('json_data', '!=', 'null')
                ->first();
            if (isset($list_media->id)) {
                ListMedia::where('id', '=', $list_media->id)->update(['status' => 'publish', 'api' => 'publish', 'web_view' => 1, 'recommend' => 2]);
                //dd($list_media->id);
                $json_data = json_decode($list_media->json_data);
                if ($value->template != '') {

                    $template = '';
                    $str = $value->template;
                    $str = preg_replace("/[^A-Za-z0-9.!? ]/", "", $str);
                    $str = preg_replace("/[^A-Za-z0-9.!?\s]/", "", $str);
                    $str = preg_replace("/[^A-Za-z0-9.!?[:space:]]/", "", $str);
                    $str = strtolower($str);
                    $value->template = explode(" ", $str)[0];
                    //dd($value->template);         
                    if ($value->template == 'multimedia') {
                        $template = 'Multimedia';
                    }
                    if ($value->template == 'visual') {
                        $template = 'Visual';
                    }
                    if ($value->template == 'text') {
                        $template = 'Text';
                    }
                    $json_data->Template = $template;
                    ListMedia::where('id', '=', $list_media->id)->update(['template' => $template, 'json_data' => json_encode($json_data)]);

                    //echo $value->template." <---id=".$value->no;
                    //echo "<br>";
                    //ListMedia::where('id','=',$list_media->id)->update([]);

                }

                if ($value->issue != '') {
                    $issues_data = ListIssue::select('issues_id', 'name')
                        ->whereRaw('name like "%' . $value->issue . '%"')->first();
                    $array = [];
                    if (isset($issues_data->issues_id)) {
                        $object = new \Stdclass;
                        $object->ID = $issues_data->issues_id;
                        $object->Name = $issues_data->name;
                        array_push($array, $object);
                        $value->issue  = $array;
                    } else {
                        $data_issues = [];
                        $data_issues['name'] = $value->issue;
                        //$data_issues['issues_id'] = 'ncds-1';
                        $data_issues['status'] = 'publish';
                        $data_issues['parent_id'] = 0;
                        $data_issues['order'] = 0;
                        $issues_id = ListIssue::create($data_issues);
                        //echo var_export($data['issues_id'], true) . " is NOT numeric", PHP_EOL;
                        // $data['issues_id'] = $issues_id->id;
                        ListIssue::where('id', '=', $issues_id->id)->update(['issues_id' => $issues_id->id]);
                        $object = new \Stdclass;
                        $object->ID = $issues_id->id;
                        $object->Name = $value->issue;
                        array_push($array, $object);
                        $value->issue  = $array;
                    }
                    $json_data->Issues = $value->issue;
                    //dd($json_data);
                    ListMedia::where('id', '=', $list_media->id)->update(['json_data' => json_encode($json_data)]);
                }
                //print_r($value->issue);
                //echo " <---id=".$value->no;
                //echo "<br>";

                if ($value->age != '') {
                    $age_ex = explode(" ", $value->age);
                    //dd($value->age,$age_ex);
                    $value->age = [(int)$age_ex[1]];
                    ListMedia::where('id', '=', $list_media->id)->update(['age' => json_encode($value->age)]);
                    //dd($value->age);
                }
                // echo $value->age." <---id=".$value->no;
                // echo "<br>";

                if ($value->target != '') {
                    $target_ex = explode('(', $value->target);
                    // print_r($target_ex);
                    // echo " <---id=".$value->no;
                    // echo "<br>";

                    if (count($target_ex) > 2) {
                        //dd($target_ex);
                        $array = [];
                        $target_data = ListTarget::select('target_id', 'name')
                            ->whereRaw('name like "%' . str_replace(" ", "", $target_ex[0]) . '%"')->first();
                        if (isset($target_data->target_id)) {
                            $object = new \Stdclass;
                            $object->ID = $target_data->target_id;
                            $object->Name = $target_data->name;
                            array_push($array, $object);
                            //dd($target_data,$value->target);
                        }
                        $target2 = explode(",", $target_ex[1]);
                        $target_data = ListTarget::select('target_id', 'name')
                            ->whereRaw('name like "%' . str_replace(" ", "", $target2[1]) . '%"')->first();
                        if (isset($target_data->target_id)) {
                            $object = new \Stdclass;
                            $object->ID = $target_data->target_id;
                            $object->Name = $target_data->name;
                            array_push($array, $object);
                            //dd($target_data,$value->target);
                        }
                        $value->target = $array;
                        //dd($value->target);
                    } else {
                        if ($target_ex[0] == 'ทุกช่วงวัย') {
                            $array = [];
                            $object = new \Stdclass;
                            $object->ID = 13;
                            $object->Name = 'ปฐมวัย(0–5ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 24;
                            $object->Name = 'วัยเรียน(6–12ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 26;
                            $object->Name = 'วัยรุ่น(13–15ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 4;
                            $object->Name = 'เยาวชน(15-20 ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 25;
                            $object->Name = 'วัยทำงาน(21-59 ปี)';
                            array_push($array, $object);
                            $object = new \Stdclass;
                            $object->ID = 19;
                            $object->Name = 'ผู้สูงอายุ(60ปีขึ้นไป)';
                            array_push($array, $object);
                            $value->target  = $array;
                            //dd($value->target);
                        } else {
                            $target_data = ListTarget::select('target_id', 'name')
                                ->whereRaw('name like "%' . str_replace(" ", "", $target_ex[0]) . '%"')->first();

                            if (isset($target_data->target_id)) {
                                $object = new \Stdclass;
                                $object->ID = $target_data->target_id;
                                $object->Name = $target_data->name;
                                $value->target  = $object;
                                //dd($target_data,$value->target);
                            }
                        }
                    }
                    //dd($value->target);
                    $json_data->Targets = $value->target;
                    //dd($json_data);
                    ListMedia::where('id', '=', $list_media->id)->update(['json_data' => json_encode($json_data)]);
                    //ปฐมวัย(0–5ปี) = 13
                    //วัยเรียน(6–12ปี) = 24
                    //วัยรุ่น(13–15ปี) = 26
                    //เยาวชน(15-20 ปี) = 4
                    //วัยทำงาน(21-59 ปี) = 25
                    //ผู้สูงอายุ(60ปีขึ้นไป) = 19
                    //print_r($value->target);
                    //echo " <---id=".$value->no;
                    //echo "<br>";
                }

                if ($value->sex != '') {
                    $sex_ex = explode(" ", $value->sex);
                    //dd($value->age,$sex_ex);
                    $value->sex = $sex_ex[0];

                    if ($value->sex == 'ทุกเพศ') {
                        $value->sex = [1, 2, 3];
                    }

                    if ($value->sex == 'ผู้หญิง') {
                        $value->sex = [2];
                    }

                    if ($value->sex == 'ผู้ชาย') {
                        $value->sex = [1];
                    }
                    //dd($value->sex);
                    ListMedia::where('id', '=', $list_media->id)->update(['sex' => json_encode($value->sex)]);
                    // print_r($value->sex);
                    // echo " <---id=".$value->no;
                    // echo "<br>";

                }

                if ($value->keyword != '') {
                    $keyword_ex = explode(",", $value->keyword);
                    $keyword_ex2 = explode("/", $value->keyword);

                    if (count($keyword_ex2) > 1) {
                        //dd(count($keyword_ex2),$keyword_ex2,$value->keyword);
                        // print_r($keyword_ex2);
                        // echo " <---id=".$value->no;
                        // echo "<br>";
                        $array = [];
                        foreach ($keyword_ex2 as $key => $value_keyword) {
                            //dd($value);
                            array_push($array, str_replace(" ", "", $value_keyword));
                        }
                        $value->keyword = $array;
                    } else {
                        // print_r($keyword_ex);
                        // echo " <---id=".$value->no;
                        // echo "<br>";
                        $array = [];
                        foreach ($keyword_ex as $key => $value_keyword) {
                            //dd($value);
                            array_push($array, str_replace(" ", "", $value_keyword));
                        }
                        //dd(json_encode($array),$value->keyword);
                        $value->keyword = $array;
                    }
                    //dd($value->keyword);
                    $json_data->Keywords = $value->keyword;
                    //dd($json_data);
                    ListMedia::where('id', '=', $list_media->id)->update(['json_data' => json_encode($json_data)]);
                    //dd($value->age,$keyword_ex);
                    // print_r($value->keyword);
                    // echo " <---id=".$value->no;
                    // echo "<br>";
                }
                //dd($issues_data,$value->issue);
                //dd($json_data,$list_media->id);
            }
            //dd($value,$id_ex,$id,$list_media,$json_data);
        }
        dd("Success Recommend", $i);
    }


    public function getUpdateTags()
    {
        //dd("Update Tags");
        $data = DB::table('tbl_data_tags')
            //->select('*')
            //->limit(1)
            //->GroupBy('tags_id','data_type')
            ->get();
        $data_group_by = collect($data)->groupBy('tags_id', 'data_type')->toArray();
        //dd($data,$data_group_by);

        foreach ($data_group_by as $key => $value) {
            //dd($key,$value);
            $array = [];
            $id = '';
            $data_type = '';
            foreach ($value as $value2) {
                $data_tag = DB::table('tbl_tags')->select('title')->where('id', '=', $value2->tags_id)->first();
                //dd($value2,$data_tag);
                if (isset($data_tag->title)) {
                    array_push($array, $data_tag->title);
                }
                $id = $value2->id;
                $data_type = $value2->data_type;
            }
            //dd($array);
            if ($data_type == 'media') {
                ListMedia::where('id', '=', $id)->update(['tags' => json_encode($array)]);
            } else {
                Article::where('id', '=', $id)->update(['tags' => json_encode($array)]);
            }
        }
        dd("Update Tags Success");
    }


    public function getUpdateImages()
    {

        dd("Update Images");
        $model_type = 'App\Modules\Api\Models\ListMedia';
        $data_media = DB::table('media')
            ->select('id', 'model_id')
            ->where('collection_name', '=', 'cover_desktop')
            ->where('model_type', '=', $model_type)
            ->get();

        //dd($data_media);
        if ($data_media->count() > 0) {
            foreach ($data_media as $key => $value) {
                $image_path = '/media/' . $value->id . '/conversions/thumb1366x635.jpg';
                //dd($image_path);
                ListMedia::where('id', '=', $value->model_id)->update(['image_path' => $image_path]);
            }
        }

        $model_type = 'App\Modules\Article\Models\Article';
        $data_media = DB::table('media')
            ->select('id', 'model_id')
            ->where('collection_name', '=', 'cover_desktop')
            ->where('model_type', '=', $model_type)
            ->get();

        //dd($data_media);
        if ($data_media->count() > 0) {
            foreach ($data_media as $key => $value) {
                $image_path = '/media/' . $value->id . '/conversions/thumb1366x635.jpg';
                //dd($image_path);
                Article::where('id', '=', $value->model_id)->update(['image_path' => $image_path]);
            }
        }
        dd("Success Images");
    }

    public function getUpdateNcds()
    {
        ini_set('memory_limit', -1);
        ini_set('max_execution_time', 0);
        set_time_limit(0);
        dd("getUpdateNcds");

        $data = DB::table('importncds')
            //->select('*')
            //->limit(10)
            ->get();

        //dd($data);

        //dd("getImportRecommend",$data);
        foreach ($data as $key => $value) {

            $id_ex = explode("/", $value->link);

            $id = explode("?", $id_ex[5]);

            // $check = DB::table('importncds')->whereRaw("link LIKE '%".$id[0]."%'")
            // //->first();
            // ->update(['UploadFileID'=>$id[0]]);

            // echo "<pre>";
            //       print_r($id);
            //       print_r($check);
            // echo "</pre>";

            //dd($value);
            $list_media = ListMedia::where('UploadFileID', '=', $id[0])->first();
            //dd($value,$list_media);
            if (isset($list_media->id)) {

                $json_data = json_decode($list_media->json_data);
                //dd($json_data,$json_data->UploadFileID);
                if (isset($json_data->UploadFileID) && $json_data->UploadFileID != '') {

                    $check_article = Article::select('id')
                        ->where('dol_UploadFileID', '=', $json_data->UploadFileID)
                        ->where('page_layout', '=', 'health-literacy')
                        ->first();


                    if ($value->issue != '') {



                        $category_id = '';
                        if ($value->issue == 'แอลกอฮอล์') {
                            #แอลกอฮอล์
                            $category_id = 5;
                        }

                        if ($value->issue == 'ยาสูบ') {
                            #ยาสูบ
                            $category_id = 16;
                        }

                        if ($value->issue == 'อาหาร') {
                            #อาหาร
                            $category_id = 7;
                        }

                        if ($value->issue == 'กิจกรรมทางกาย') {
                            #กิจกรรมทางกาย
                            $category_id = 8;
                        }

                        if ($value->issue == 'อุบัติเหตุ') {
                            #อุบัติเหตุ
                            $category_id = 9;
                        }

                        if ($value->issue == 'มลภาวะทางอากาศ') {
                            #มลภาวะทางอากาศ
                            $category_id = 15;
                        }

                        if ($value->issue == 'สุขภาพจิต') {
                            #สุขภาพจิต
                            $category_id = 11;
                        }

                        if ($value->issue == 'อื่นๆ') {
                            #อื่นๆ
                            $category_id = 14;
                        }

                        if ($value->issue == 'มลภาวะทางอากาศ') {
                            #มลภาวะทางอากาศ
                            $category_id = 15;
                        }

                        if ($value->issue == 'โรคปอดอุดกั้นเรื้อรัง') {
                            #โรคปอดอุดกั้นเรื้อรัง
                            $category_id = 19;
                        }

                        if ($value->issue == 'เหล้า') {
                            #เหล้า
                            $category_id = 18;
                        }

                        if ($value->issue == 'โรคมะเร็ง') {
                            #โรคมะเร็ง
                            $category_id = 20;
                        }

                        if ($value->issue == 'โรคหัวใจและหลอดเลือด') {
                            #โรคหัวใจและหลอดเลือด
                            $category_id = 13;
                        }

                        if ($value->issue == 'โรคเบาหวาน') {
                            #โรคเบาหวาน
                            $category_id = 22;
                        }

                        //dd($category_id,$value->issue);

                        // $issues_data = ListIssue::select('issues_id','name')
                        //                         ->whereRaw('name like "%'.$value->issue.'%"')->first();
                        // $array = [];
                        // if (isset($issues_data->issues_id)) {
                        //     $object = new \Stdclass;
                        //     $object->ID = $issues_data->issues_id;
                        //     $object->Name = $issues_data->name;
                        //     array_push($array,$object);
                        //     $value->issue  =$array;

                        // } else {
                        //     $data_issues = [];
                        //     $data_issues['name'] = $value->issue;
                        //     //$data_issues['issues_id'] = 'ncds-1';
                        //     $data_issues['status'] = 'publish';
                        //     $data_issues['parent_id'] =0;
                        //     $data_issues['order'] =0;
                        //     $issues_id = ListIssue::create($data_issues);
                        //     //echo var_export($data['issues_id'], true) . " is NOT numeric", PHP_EOL;
                        //     // $data['issues_id'] = $issues_id->id;
                        //     ListIssue::where('id','=',$issues_id->id)->update(['issues_id'=>$issues_id->id]);
                        //     $object = new \Stdclass;
                        //     $object->ID = $issues_id->id;
                        //     $object->Name = $value->issue;
                        //     array_push($array,$object);
                        //     $value->issue  =$array;                    
                        // }
                        // $json_data->Issues =$value->issue;
                        // //dd($json_data);
                        // ListMedia::where('id','=',$list_media->id)->update(['json_data'=>json_encode($json_data)]);

                    }

                    if ($value->target == 'ทุกช่วงวัย') {
                        $array = [];
                        $object = new \Stdclass;
                        $object->ID = 13;
                        $object->Name = 'ปฐมวัย(0–5ปี)';
                        array_push($array, $object);
                        $object = new \Stdclass;
                        $object->ID = 24;
                        $object->Name = 'วัยเรียน(6–12ปี)';
                        array_push($array, $object);
                        $object = new \Stdclass;
                        $object->ID = 26;
                        $object->Name = 'วัยรุ่น(13–15ปี)';
                        array_push($array, $object);
                        $object = new \Stdclass;
                        $object->ID = 4;
                        $object->Name = 'เยาวชน(15-20 ปี)';
                        array_push($array, $object);
                        $object = new \Stdclass;
                        $object->ID = 25;
                        $object->Name = 'วัยทำงาน(21-59 ปี)';
                        array_push($array, $object);
                        $object = new \Stdclass;
                        $object->ID = 19;
                        $object->Name = 'ผู้สูงอายุ(60ปีขึ้นไป)';
                        array_push($array, $object);
                        $value->target  = $array;
                        $json_data->Targets = $value->target;
                        //dd($value->target);
                    }

                    //dd($check_article,$json_data);



                    if (!isset($check_article->id)) {
                        $data_article  = [];
                        $data_article['page_layout'] = 'health-literacy';
                        $data_article['title'] = $json_data->Title;
                        $data_article['description'] = $json_data->Description;
                        $data_article['short_description'] = strip_tags($json_data->Description);
                        $data_article['dol_cover_image'] = $json_data->ThumbnailAddress;
                        $data_article['dol_UploadFileID'] = $json_data->UploadFileID;
                        $data_article['dol_url'] = $json_data->FileAddress;
                        $data_article['dol_template'] = $value->template;
                        $data_article['dol_json_data'] = json_encode($json_data);
                        $data_article['category_id'] = $category_id;

                        $date_year = date('Y-m-d');
                        $date_year = strtotime($date_year);
                        $date_year = strtotime("+10 year", $date_year);
                        $data_article['start_date'] = date("Y-m-d H:i:s");
                        $data_article['end_date'] = date('Y-m-d H:i:s', $date_year);
                        $data_article['status'] = 'publish';
                        //dd($data_article);
                        // echo "<pre>";
                        //         print_r($data_article);
                        // echo "</pre>";
                        // exit();
                        dd($data_article, "case1");
                        Article::create($data_article);
                    } else {

                        $data_article  = [];
                        $data_article['page_layout'] = 'health-literacy';
                        $data_article['title'] = $json_data->Title;
                        $data_article['description'] = $json_data->Description;
                        $data_article['short_description'] = strip_tags($json_data->Description);
                        $data_article['dol_cover_image'] = $json_data->ThumbnailAddress;
                        $data_article['dol_UploadFileID'] = $json_data->UploadFileID;
                        $data_article['dol_url'] = $json_data->FileAddress;
                        $data_article['dol_template'] = $value->template;
                        $data_article['dol_json_data'] = json_encode($json_data);
                        $data_article['category_id'] = $category_id;
                        $date_year = date('Y-m-d');
                        $date_year = strtotime($date_year);
                        $date_year = strtotime("+10 year", $date_year);
                        $data_article['start_date'] = date("Y-m-d H:i:s");
                        $data_article['end_date'] = date('Y-m-d H:i:s', $date_year);
                        $data_article['status'] = 'publish';
                        //dd($data_article);
                        // echo "<pre>";
                        //         print_r($data_article);
                        // echo "</pre>";
                        // exit();
                        //dd($data_article,"case2");
                        Article::where('id', '=', $check_article->id)->update($data_article);
                    }
                }
            }
            //dd($value,$id_ex,$id,$list_media,$json_data);
        }
        dd("Success Ncds");
    }


    public function getUpdateNcds2()
    {
        ini_set('memory_limit', -1);
        ini_set('max_execution_time', 0);
        set_time_limit(0);
        dd("getUpdateNcds2");
        $data = DB::select("SELECT
                                article.*
                            FROM
                                article
                            WHERE
                                article.page_layout = 'health-literacy'
                                AND 
                                dol_UploadFileID NOT IN (SELECT
                                UploadFileID
                            FROM
                                importncds GROUP BY UploadFileID)");
        //dd($data);
        foreach ($data as $key => $value) {
            //dd($value);
            Article::where('id', '=', $value->id)->update(['status' => 'draft']);
        }
        dd("Success Ncd2");
    }

    public function getUpdateNcds3()
    {
        ini_set('memory_limit', -1);
        ini_set('max_execution_time', 0);
        set_time_limit(0);
        dd("getUpdateNcds3");
        $data = DB::select("SELECT
                               *
                            FROM
                                importncds
                            GROUP BY UploadFileID");
        //WHERE UploadFileID = '60fec7ab-48f9-e711-80de-00155d84fa40'              
        //dd($data);
        foreach ($data as $key => $value) {
            $data_UploadFileID = DB::table('importncds')
                ->where('UploadFileID', '=', $value->UploadFileID)
                ->groupBy('issue')
                ->get();
            $category_id_array = [];
            foreach ($data_UploadFileID as $key_2 => $value_2) {

                if ($value_2->issue != '') {

                    $category_id = '';
                    if ($value_2->issue == 'เหล้า') {
                        #เหล้า
                        $category_id = 5;
                    }

                    if ($value_2->issue == 'แอลกอฮอล์') {
                        #แอลกอฮอล์
                        $category_id = 5;
                    }


                    if ($value_2->issue == 'ยาสูบ') {
                        #ยาสูบ
                        $category_id = 6;
                    }

                    if ($value_2->issue == 'อาหาร') {
                        #อาหาร
                        $category_id = 7;
                    }

                    if ($value_2->issue == 'กิจกรรมทางกาย') {
                        #กิจกรรมทางกาย
                        $category_id = 8;
                    }

                    if ($value_2->issue == 'อุบัติเหตุ') {
                        #อุบัติเหตุ
                        $category_id = 9;
                    }

                    if ($value_2->issue == 'มลภาวะทางอากาศ') {
                        #มลภาวะทางอากาศ
                        $category_id = 15;
                    }

                    if ($value_2->issue == 'สุขภาพจิต') {
                        #สุขภาพจิต
                        $category_id = 11;
                    }

                    if ($value_2->issue == 'อื่นๆ') {
                        #อื่นๆ
                        $category_id = 14;
                    }

                    if ($value_2->issue == 'มลภาวะทางอากาศ') {
                        #มลภาวะทางอากาศ
                        $category_id = 15;
                    }

                    if ($value_2->issue == 'โรคปอดอุดกั้นเรื้อรัง') {
                        #โรคปอดอุดกั้นเรื้อรัง
                        $category_id = 19;
                    }

                    if ($value_2->issue == 'โรคมะเร็ง') {
                        #โรคมะเร็ง
                        $category_id = 20;
                    }

                    if ($value_2->issue == 'โรคหัวใจและหลอดเลือด') {
                        #โรคหัวใจและหลอดเลือด
                        $category_id = 13;
                    }

                    if ($value_2->issue == 'โรคเบาหวาน') {
                        #โรคเบาหวาน
                        $category_id = 22;
                    }
                }
                array_push($category_id_array, $category_id);
                //dd($value_2,$category_id);
            }
            $data_insert = [];
            $data_insert['issue'] = json_encode($category_id_array);
            $data_insert['title'] = $value->title;
            $data_insert['UploadFileID'] = $value->UploadFileID;
            DB::table('importncds_new')->insert($data_insert);
            //dd($data_UploadFileID->toArray(),$category_id_array,$data_insert);

            //dd($value,$data_UploadFileID);  
        }
        dd("Success Ncd3");
    }

    public function getUpdateNcds4()
    {
        ini_set('memory_limit', -1);
        ini_set('max_execution_time', 0);
        set_time_limit(0);
        dd("getUpdateNcds4");
        $data = DB::select("SELECT
                               *
                            FROM
                                importncds_new
                            ");
        //WHERE UploadFileID = '60fec7ab-48f9-e711-80de-00155d84fa40'              
        //dd($data);
        foreach ($data as $key => $value) {
            $data_update = [];
            $data_update['category_id'] = $value->issue;

            Article::where('dol_UploadFileID', '=', $value->UploadFileID)->update($data_update);
            //dd($data_UploadFileID->toArray(),$category_id_array,$data_insert);
            //dd($data_update,$value->UploadFileID);
            //dd($value,$data_UploadFileID);  
        }
        dd("Success Ncd4");
    }


    public function getUpdateApi()
    {

        dd("Update Api");

        // $data = DB::table('list_article_api_backup_15_7_2021')
        // ->get();        
        // //dd($data);
        // foreach ($data as $key => $value) {
        //     //dd($value);
        //     $new_data = DB::table('list_article_backup_15_7_2021')
        //                     ->where('article_id','=',$value->article_id)
        //                     ->where('article_type','=',$value->article_type)
        //                     ->first();
        //     if(isset($new_data->id)){
        //         DB::table('list_article_api_backup_15_7_2021')
        //         ->where('article_id','=',$value->article_id)
        //         ->where('article_type','=',$value->article_type)
        //         ->update(['sex'=>$new_data->sex,'age'=>$new_data->age,'tags'=>$new_data->tags,'image_path'=>$new_data->image_path,'template'=>$new_data->template,'json_data'=>$new_data->json_data]);
        //     }
        //     //dd($value,$new_data);
        // }

        $data = DB::table('list_article_backup_15_7_2021')
            //->select('*')
            //->limit(1)
            ->where('web_view', '=', 1)
            ->get();
        //dd($data);    
        foreach ($data as $key => $value) {
            //dd($value);
            $new_data = DB::table('list_article_api_backup_15_7_2021')
                ->where('article_id', '=', $value->article_id)
                ->where('article_type', '=', $value->article_type)
                ->first();
            if (!isset($new_data->id)) {

                DB::table('list_article_api_backup_15_7_2021')->insert([
                    'article_id' => $value->article_id,
                    'title' => $value->title,
                    'description' => $value->description,
                    'featured' => $value->featured,
                    'template' => $value->template,
                    'UploadFileID' => $value->UploadFileID,
                    'json_data' => $value->json_data,
                    'status' => $value->status,
                    'created_at' => $value->created_at,
                    'updated_at' => $value->updated_at,
                    'created_by' => $value->created_by,
                    'updated_by' => $value->updated_by,
                    'hit' => $value->hit,
                    'download' => $value->download,
                    'knowledges' => $value->knowledges,
                    'media_campaign' => $value->media_campaign,
                    'article_type' => $value->article_type,
                    'slug' => $value->slug,
                    'sex' => $value->sex,
                    'age' => $value->age,
                    'tags' => $value->tags,
                    'image_path' => $value->image_path
                ]);
                //dd($value);               
            }
        }

        dd("Success Api");
    }
}
